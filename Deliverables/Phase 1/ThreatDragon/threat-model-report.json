{
  "summary": {
    "title": "TripNau Threat Model",
    "owner": "Group 2 - M1A",
    "description": "A Threat Model for the TripNau.",
    "id": 0
  },
  "detail": {
    "contributors": [
      {
        "name": "1190326  - Afonso Machado"
      },
      {
        "name": "1190535 - Domingos Machado"
      },
      {
        "name": "1230201 - Nuno Ribeiro"
      },
      {
        "name": "1230211 - Rui Neto"
      },
      {
        "name": "1230212 - Simão Santos"
      }
    ],
    "diagrams": [
      {
        "cells": [
          {
            "position": {
              "x": 906,
              "y": 570
            },
            "size": {
              "width": 160,
              "height": 80
            },
            "attrs": {
              "text": {
                "text": "Database"
              },
              "topLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              },
              "bottomLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "store",
            "zIndex": 2,
            "id": "936557f9-22e2-4bac-bb70-0089c5c2fbe1",
            "data": {
              "name": "Database",
              "description": "The database that store the generic data.",
              "type": "tm.Store",
              "isTrustBoundary": false,
              "outOfScope": false,
              "reasonOutOfScope": "",
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "description": "An attacker could make an query call on the DB.",
                  "title": "Unauthorized access",
                  "type": "Information disclosure",
                  "mitigation": "Require all queries to be authenticated.",
                  "modelType": "STRIDE",
                  "id": "d0fe1c3d-1021-45d5-9e5b-95614e0a4686",
                  "new": false
                }
              ],
              "hasOpenThreats": true,
              "isALog": false,
              "storesCredentials": true,
              "isEncrypted": false,
              "isSigned": false,
              "storesInventory": false
            }
          },
          {
            "position": {
              "x": 195,
              "y": 245
            },
            "size": {
              "width": 110,
              "height": 110
            },
            "attrs": {
              "text": {
                "text": "Frontend"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 6,
            "id": "0d9909ea-1398-4898-be81-cf1c808324dc",
            "data": {
              "name": "Frontend",
              "description": "Frontend application",
              "type": "tm.Process",
              "isTrustBoundary": false,
              "outOfScope": false,
              "reasonOutOfScope": "",
              "threats": [],
              "hasOpenThreats": false,
              "isWebApplication": true,
              "handlesCardPayment": null,
              "handlesGoodsOrServices": null,
              "privilegeLevel": "User"
            }
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Request",
              "description": "Generic Request",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": false,
              "isPublicNetwork": false,
              "protocol": "",
              "threats": [
                {
                  "id": "652c89bc-1bb1-4bbf-879d-95a3640ca9c2",
                  "title": "Accessing another user’s credentials",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Spoofing",
                  "description": "The request could be done by an attacker that had access to the user's password through various means, such as phishing or intercepting login credentials, and because of that, the attacker can gain unauthorized access to the user's account, potentially compromising sensitive information, performing malicious actions, etc.",
                  "mitigation": "Two-Factor Authentication (2FA) adds an extra layer of security by requiring users to provide a second form of authentication, with a code sent to the mobile device, in addition to their password. Even if an attacker manages to steal the user's password, they would still need this second factor to access the account.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 116,
                  "score": ""
                }
              ]
            },
            "id": "f2f3bc72-e813-47e6-9dd8-fb6d5986c086",
            "labels": [
              "Request"
            ],
            "source": {
              "cell": "1e15237e-2057-4b49-b20c-6c073eb16bd7"
            },
            "target": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "vertices": [
              {
                "x": -53.75,
                "y": 100
              },
              {
                "x": -10,
                "y": 190
              },
              {
                "x": 110,
                "y": 230
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "f8ec08ec-3182-45c8-a723-08692778147e",
            "source": {
              "x": -140,
              "y": 90
            },
            "target": {
              "x": 550,
              "y": 80
            },
            "vertices": [
              {
                "x": 200,
                "y": 170
              },
              {
                "x": 400,
                "y": 140
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Request",
              "description": "Generic Request",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": false,
              "isPublicNetwork": false,
              "protocol": "",
              "threats": [
                {
                  "id": "e9a5219a-24af-41ad-9960-0705078c1145",
                  "title": "Accessing another user’s credentials ",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Spoofing",
                  "description": "The request could be done by an attacker that had access to the user's password through various means, such as phishing or intercepting login credentials, and because of that, the attacker can gain unauthorized access to the pending reviews page and approve or reject reviews.",
                  "mitigation": "Two-Factor Authentication (2FA) adds an extra layer of security by requiring users to provide a second form of authentication, with a code sent to the mobile device, in addition to their password. Even if an attacker manages to steal the user's password, they would still need this second factor to access the account.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 132,
                  "score": ""
                }
              ]
            },
            "id": "47e6b8f6-d4cf-4765-aaa7-4313562573a4",
            "labels": [
              "Request"
            ],
            "source": {
              "cell": "93dc5e61-dfc8-42b5-b386-77ea679321c6"
            },
            "target": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "vertices": [
              {
                "x": 220,
                "y": 170
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Response",
              "description": "Generic Response",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "isBidirectional": false,
              "isEncrypted": false,
              "isPublicNetwork": false,
              "protocol": "",
              "threats": []
            },
            "id": "803cdc9e-555c-493d-a654-0152ccc1130a",
            "labels": [
              "Response"
            ],
            "source": {
              "x": 260,
              "y": 40
            },
            "target": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "vertices": [
              {
                "x": 280,
                "y": 60
              },
              {
                "x": 300,
                "y": 120
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Web Forward Request",
              "description": "Generic web request.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "96a9d448-1b82-4194-a6f1-1ef39fdc1aec",
                  "title": "Data flow should use HTTP/S ",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Spoofing",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker. ",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 143,
                  "score": ""
                },
                {
                  "id": "5c9e120b-e5dc-4adb-a65b-6815602a73f3",
                  "title": "Can't identify the user that performs the operation",
                  "status": "Open",
                  "severity": "High",
                  "type": "Repudiation",
                  "description": "There's a risk that requests will occur within the Middleware without proper attribution to the responsible user if there's no mechanism for attribution.",
                  "mitigation": "Implementing an audit log is a possible mitigation strategy. It records all significant events within the system,  ensuring accountability and traceability.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 177,
                  "score": ""
                }
              ]
            },
            "id": "74109fc1-71a2-4026-bf94-ba1b3c0ebb48",
            "labels": [
              "Web Forward Request"
            ],
            "source": {
              "cell": "2314cae0-6d2a-43b9-8134-335451130384"
            },
            "target": {
              "cell": "5422dc91-cc60-4977-8206-20a806f58b7b"
            },
            "vertices": [
              {
                "x": 800,
                "y": 270
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Web Response",
              "description": "Generic Response.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "277d318c-579c-4106-b1e6-6e44d689d890",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Information disclosure",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker. ",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 142,
                  "score": ""
                },
                {
                  "id": "3bda5ea8-f008-4d33-9747-88ef291bf185",
                  "title": "Man in the middle attack",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Spoofing",
                  "description": "An attacker could intercept the request query in transit and change the content in order to block the receiver system.",
                  "mitigation": "Enforce an encrypted connection.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 164,
                  "score": ""
                }
              ]
            },
            "id": "acb53f32-0efb-41e0-abd2-6e8896cf41a7",
            "labels": [
              "Web Response"
            ],
            "source": {
              "cell": "5422dc91-cc60-4977-8206-20a806f58b7b"
            },
            "target": {
              "cell": "2314cae0-6d2a-43b9-8134-335451130384"
            },
            "vertices": [
              {
                "x": 780,
                "y": 360
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Data Response",
              "description": "Query response.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": false,
              "protocol": "TCP/IP",
              "threats": [
                {
                  "id": "c42fa2b7-98bf-4cc2-bdf8-f0676e3c27e4",
                  "title": "Credential Exposure",
                  "status": "Open",
                  "severity": "Low",
                  "type": "Information disclosure",
                  "description": "If database credentials are transmitted insecurely, they could be intercepted and used by an attacker to gain unauthorized access.",
                  "mitigation": "Always use encrypted connections for transmitting credentials and employ robust authentication mechanisms.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 144,
                  "score": ""
                }
              ]
            },
            "id": "ee74cae1-92c2-4e3c-b8f6-01d8bc80e565",
            "labels": [
              "Data Response"
            ],
            "source": {
              "cell": "936557f9-22e2-4bac-bb70-0089c5c2fbe1"
            },
            "target": {
              "cell": "5422dc91-cc60-4977-8206-20a806f58b7b"
            },
            "vertices": [
              {
                "x": 1070,
                "y": 460
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Read/Write Request",
              "description": "Generic Query.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": false,
              "protocol": "TCP/IP",
              "threats": [
                {
                  "id": "a0c197b2-b0a3-48ad-8317-6215be53380d",
                  "title": "Man in the middle attack",
                  "status": "Open",
                  "severity": "Low",
                  "type": "Information disclosure",
                  "description": "An attacker could intercept the DB queries in transit and obtain sensitive information, such as DB credentials, query parameters or query results (is unlikely since the data flow is over a private network).",
                  "mitigation": "Enforce an encrypted connection at the DB server",
                  "modelType": "Generic",
                  "new": false,
                  "number": 127,
                  "score": ""
                },
                {
                  "id": "51857fc4-c5e1-4a6d-8206-f9539ea58120",
                  "title": "SQL Injection",
                  "status": "Open",
                  "severity": "High",
                  "type": "Tampering",
                  "description": "Attackers can manipulate the SQL auth queries by injecting malicious SQL code through input fields that interface with the database.",
                  "mitigation": "Use prepared statements and parameterized queries to handle SQL commands. Never concatenate user input directly into SQL queries. Regularly validate and sanitize all user inputs.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 136,
                  "score": ""
                }
              ]
            },
            "id": "d8d699dd-b17e-4f77-a453-8e76249fb049",
            "labels": [
              "Read/Write Request"
            ],
            "source": {
              "cell": "5422dc91-cc60-4977-8206-20a806f58b7b"
            },
            "target": {
              "cell": "936557f9-22e2-4bac-bb70-0089c5c2fbe1"
            },
            "vertices": [
              {
                "x": 900,
                "y": 460
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Request",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": false,
              "isPublicNetwork": false,
              "protocol": "",
              "threats": [
                {
                  "id": "cd56d7b1-db4d-4791-8af4-c04ba2ee1166",
                  "title": "Accessing another user’s credentials",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Spoofing",
                  "description": "The request could be done by an attacker that had access to the user's password through various means, such as phishing or intercepting login credentials, and because of that, the attacker can gain unauthorized access to the pending reviews page and approve or reject reviews.",
                  "mitigation": "Two-Factor Authentication (2FA) adds an extra layer of security by requiring users to provide a second form of authentication, with a code sent to the mobile device, in addition to their password. Even if an attacker manages to steal the user's password, they would still need this second factor to access the account.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 133,
                  "score": ""
                }
              ]
            },
            "id": "7771eca9-bdb8-44a2-840b-8bdf05567fbd",
            "labels": [
              "Request"
            ],
            "source": {
              "cell": "82805f8d-2bcd-4107-b03d-055941e037b7"
            },
            "target": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "vertices": [
              {
                "x": 380,
                "y": 130
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Response",
              "description": "Generic Response",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "isBidirectional": false,
              "isEncrypted": false,
              "isPublicNetwork": false,
              "protocol": "",
              "threats": []
            },
            "id": "5fc039a0-7b18-4809-bd42-867dcc183458",
            "labels": [
              "Response"
            ],
            "source": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "target": {
              "x": 0,
              "y": 40
            }
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Response",
              "description": "Generic Response",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "isBidirectional": false,
              "isEncrypted": false,
              "isPublicNetwork": false,
              "protocol": "",
              "threats": []
            },
            "id": "599a02ac-c59f-4b5b-9e2e-0354813f7a9b",
            "labels": [
              "Response"
            ],
            "source": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "target": {
              "cell": "82805f8d-2bcd-4107-b03d-055941e037b7"
            },
            "vertices": [
              {
                "x": 430,
                "y": 170
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Read/Write Request",
              "description": "The query to the database.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": false,
              "protocol": "TCP/IP",
              "threats": [
                {
                  "id": "c3b59c75-831e-4209-8960-829893495810",
                  "title": "Log injection",
                  "status": "Open",
                  "severity": "High",
                  "type": "Tampering",
                  "description": "Attackers can exploit vulnerabilities in the application's logging functionality corrupting the format of the file or injecting unexpected characters. ",
                  "mitigation": "To mitigate log injection attacks, it should be implemented a proper input validation and sanitization techniques to ensure that user-supplied data cannot manipulate the log files.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 139,
                  "score": ""
                },
                {
                  "id": "903936fe-19dc-4732-be56-fe710e3e7989",
                  "title": "Man in the middle attack",
                  "status": "Open",
                  "severity": "Low",
                  "type": "Spoofing",
                  "description": "An attacker could intercept the DB queries in transit and obtain sensitive information, such as DB credentials, query parameters or query results (is unlikely since the data flow is over a private network).",
                  "mitigation": "Enforce an encrypted connection at the DB server",
                  "modelType": "Generic",
                  "new": false,
                  "number": 166,
                  "score": ""
                }
              ]
            },
            "id": "0e5e35b8-9da5-418b-bd6f-51cb46f4c22c",
            "labels": [
              "Read/Write Request"
            ],
            "source": {
              "cell": "7510958a-e38b-46f4-b600-28023a69f3b5"
            },
            "target": {
              "cell": "a0320430-247a-498d-a3bd-b6c8a56a486c"
            },
            "vertices": [
              {
                "x": 1320,
                "y": 440
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Data Response",
              "description": "The response from the database.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": false,
              "protocol": "TCP/Ip",
              "threats": [
                {
                  "id": "5313efcd-12fe-435e-b898-0ac7766dc790",
                  "title": "Credential Exposure",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "If database credentials are transmitted insecurely, they could be intercepted and used by an attacker to gain unauthorized access.",
                  "mitigation": "Always use encrypted connections for transmitting credentials and employ robust authentication mechanisms.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 145,
                  "score": ""
                }
              ]
            },
            "id": "4d292566-83b7-4f13-ac00-43947a8fb6bf",
            "labels": [
              "Data Response"
            ],
            "source": {
              "cell": "a0320430-247a-498d-a3bd-b6c8a56a486c"
            },
            "target": {
              "cell": "7510958a-e38b-46f4-b600-28023a69f3b5"
            },
            "vertices": [
              {
                "x": 1460,
                "y": 430
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Put Message",
              "description": "Send the message to the queue.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "AMQP",
              "threats": [
                {
                  "id": "49eeccfb-e70f-49bf-9cc1-c7868768d212",
                  "title": "Message should be encrypted",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "There's a risk of messages being intercepted by some attacker that can gain access to sensitive information with unauthorized access.",
                  "mitigation": "A mitigation strategy can be using encryption on the communication. This encryption should be end-to-end, meaning that only authorized parties possess the keys necessary to decrypt and access the contents of the messages. Using RabbitMQ we can use SSL (https://www.rabbitmq.com/docs/ssl)",
                  "modelType": "Generic",
                  "new": false,
                  "number": 148,
                  "score": ""
                }
              ]
            },
            "id": "4ec880dc-aafa-47ab-b6f2-947189932095",
            "labels": [
              "Put Message"
            ],
            "source": {
              "cell": "5422dc91-cc60-4977-8206-20a806f58b7b"
            },
            "target": {
              "cell": "a25eaaf1-874d-4941-9ca3-89ed48c7514e"
            },
            "vertices": [
              {
                "x": 1080,
                "y": 230
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Get Message",
              "description": "Get the message.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "AMQP",
              "threats": [
                {
                  "id": "a4ee2dfd-b448-4f7c-aab5-8d43ce770e1d",
                  "title": "Message should be encrypted",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "There's a risk of messages being intercepted by some attacker that can gain access to sensitive information with unauthorized access.",
                  "mitigation": "A mitigation strategy can be using encryption on the communication. This encryption should be end-to-end, meaning that only authorized parties possess the keys necessary to decrypt and access the contents of the messages. Using RabbitMQ we can use SSL (https://www.rabbitmq.com/docs/ssl).",
                  "modelType": "Generic",
                  "new": false,
                  "number": 152,
                  "score": ""
                }
              ]
            },
            "id": "099e649b-8167-4391-8396-3ccd243e110a",
            "labels": [
              "Get Message"
            ],
            "source": {
              "cell": "a25eaaf1-874d-4941-9ca3-89ed48c7514e"
            },
            "target": {
              "cell": "7510958a-e38b-46f4-b600-28023a69f3b5"
            },
            "vertices": [
              {
                "x": 1190,
                "y": 240
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Put message",
              "description": "Send the message to the queue.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "AMQP",
              "threats": [
                {
                  "id": "cdd24d7e-46dd-4ea7-ae47-552a551a9bf4",
                  "title": "Message should be encrypted",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "There's a risk of messages being intercepted by some attacker that can gain access to sensitive information with unauthorized access.",
                  "mitigation": "A mitigation strategy can be using encryption on the communication. This encryption should be end-to-end, meaning that only authorized parties possess the keys necessary to decrypt and access the contents of the messages. Using RabbitMQ we can use SSL (https://www.rabbitmq.com/docs/ssl).",
                  "modelType": "Generic",
                  "new": false,
                  "number": 147,
                  "score": ""
                }
              ]
            },
            "id": "f8b8af6f-6f48-4461-af25-cef610bf3b44",
            "labels": [
              "Put messagee"
            ],
            "source": {
              "cell": "2314cae0-6d2a-43b9-8134-335451130384"
            },
            "target": {
              "cell": "a25eaaf1-874d-4941-9ca3-89ed48c7514e"
            },
            "vertices": [
              {
                "x": 800,
                "y": 140
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Web Request",
              "description": "Endpoint of Middleware.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "f158ac37-6605-4131-9b71-2bf0fe11ea3c",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker. ",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 141,
                  "score": ""
                }
              ]
            },
            "id": "217204ef-4b9a-480e-8034-e225395869e7",
            "labels": [
              "Web Request"
            ],
            "source": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "target": {
              "cell": "2314cae0-6d2a-43b9-8134-335451130384"
            },
            "vertices": [
              {
                "x": 430,
                "y": 270
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "3d3f7757-33e6-4599-974a-ee88572dea23",
            "source": {
              "x": 870,
              "y": 560
            },
            "target": {
              "x": 1110,
              "y": 560
            },
            "vertices": [
              {
                "x": 990,
                "y": 480
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "99c32799-8bca-4fdf-bf06-ad395fc5c842",
            "source": {
              "x": 1240,
              "y": 580
            },
            "target": {
              "x": 1500,
              "y": 570
            },
            "vertices": [
              {
                "x": 1380,
                "y": 490
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "a9aeb5e7-2f26-400e-9243-43e25025bcab",
            "source": {
              "x": 1290,
              "y": 140
            },
            "target": {
              "x": 1000,
              "y": 60
            },
            "vertices": [
              {
                "x": 1220,
                "y": 300
              },
              {
                "x": 990,
                "y": 200
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "405df1fa-dab1-4c82-a12d-beb3da96ea79",
            "source": {
              "x": 490,
              "y": 220
            },
            "target": {
              "x": 480,
              "y": 440
            },
            "vertices": [
              {
                "x": 540,
                "y": 330
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "4f98d04a-1de2-4bf7-bca3-14c1cc1b3554",
            "source": {
              "x": 870,
              "y": 220
            },
            "target": {
              "x": 860,
              "y": 410
            },
            "vertices": [
              {
                "x": 900,
                "y": 320
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Web Response",
              "description": "Generic response.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "dbe45eff-7c99-44a2-a3b3-291545dc8de4",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker.",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 140,
                  "score": ""
                },
                {
                  "id": "968477b5-7ca9-425f-8491-06b2cb731d89",
                  "title": "Man in the middle attack",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Information disclosure",
                  "description": "An attacker could intercept the request query in transit and change the content in order to block the receiver system.",
                  "mitigation": "Enforce an encrypted connection.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 163,
                  "score": ""
                }
              ]
            },
            "id": "c124f88f-776b-4cba-aad2-3879d8a5ccba",
            "labels": [
              "Web Response"
            ],
            "source": {
              "cell": "2314cae0-6d2a-43b9-8134-335451130384"
            },
            "target": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "vertices": [
              {
                "x": 420,
                "y": 360
              }
            ]
          },
          {
            "position": {
              "x": -60,
              "y": -20
            },
            "size": {
              "width": 112.5,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "User"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "actor",
            "zIndex": 11,
            "id": "1e15237e-2057-4b49-b20c-6c073eb16bd7",
            "data": {
              "type": "tm.Actor",
              "name": "User",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "providesAuthentication": false,
              "threats": []
            }
          },
          {
            "position": {
              "x": 163.75,
              "y": -20
            },
            "size": {
              "width": 112.5,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "Property Owner"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "actor",
            "zIndex": 12,
            "id": "93dc5e61-dfc8-42b5-b386-77ea679321c6",
            "data": {
              "type": "tm.Actor",
              "name": "Property Owner",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "providesAuthentication": false,
              "threats": []
            }
          },
          {
            "position": {
              "x": 423,
              "y": -20
            },
            "size": {
              "width": 112.5,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "Business Admin"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "actor",
            "zIndex": 13,
            "id": "82805f8d-2bcd-4107-b03d-055941e037b7",
            "data": {
              "type": "tm.Actor",
              "name": "Business Admin",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "providesAuthentication": false,
              "threats": []
            }
          },
          {
            "position": {
              "x": 555.5,
              "y": 245
            },
            "size": {
              "width": 110,
              "height": 120
            },
            "attrs": {
              "text": {
                "text": "Middleware "
              },
              "body": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 16,
            "id": "2314cae0-6d2a-43b9-8134-335451130384",
            "data": {
              "type": "tm.Process",
              "name": "Middleware ",
              "description": "Responsible for request rate limiting, filtering, validation and sanitization before it reaches the backend.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "handlesCardPayment": false,
              "handlesGoodsOrServices": false,
              "isWebApplication": false,
              "privilegeLevel": "User",
              "threats": [
                {
                  "id": "1a9981f7-647d-49c3-ba6f-da995cf77a82",
                  "title": "Middleware Interruption",
                  "status": "Open",
                  "severity": "High",
                  "type": "Denial of service",
                  "description": "It's possible that the entry of the Middleware server can be target of a high demand requests by malicious actors with a high volume of traffic, overwhelming its resources and making it unable to respond to legitimate user requests. This results on the server of the application to becoming inaccessible or slow to respond for genuine users, disrupting its normal functioning.",
                  "mitigation": "One effective mitigation strategy is to implement a rate limiting and traffic filter mechanism, satisfying only the organic requests made by genuine users and blocking all suspicious interaction. ",
                  "modelType": "Generic",
                  "new": false,
                  "number": 117,
                  "score": ""
                },
                {
                  "id": "5e3a5189-5617-44ef-8722-f8a8d2a0468d",
                  "title": "Missing identification of the operation's user",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Repudiation",
                  "description": "There's a risk that requests will occur within the Middleware without proper attribution to the responsible user if there's no mechanism for attribution.",
                  "mitigation": "Implementing an audit log is a possible mitigation strategy. It records all significant events within the system,  ensuring accountability and traceability.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 134,
                  "score": ""
                },
                {
                  "id": "0e63c24a-5c66-41b8-b72a-9f95fe2ced1f",
                  "title": "Credentials exposure in repository",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Information disclosure",
                  "description": "There's a risk of exposing credentials when source code is stored in a version control system and contains sensitive data such as usernames, passwords, or API keys.",
                  "mitigation": "To mitigate the risk of credential exposure, it's essential to avoid storing sensitive credentials directly in the codebase or version control repository. Instead, we should adopt secure credential management practices, such as using environment variables, configuration files outside of the repository, or a secure vault solution. ",
                  "modelType": "Generic",
                  "new": false,
                  "number": 149,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 921,
              "y": 240
            },
            "size": {
              "width": 130,
              "height": 110
            },
            "attrs": {
              "text": {
                "text": "Backend"
              },
              "body": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 17,
            "id": "5422dc91-cc60-4977-8206-20a806f58b7b",
            "data": {
              "type": "tm.Process",
              "name": "Backend",
              "description": "The backend application.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "handlesCardPayment": false,
              "handlesGoodsOrServices": false,
              "isWebApplication": false,
              "privilegeLevel": "Middleware",
              "threats": [
                {
                  "id": "1359ca12-3f1c-4a1d-b337-0c3d91557957",
                  "title": "Repudiation account from not validated accounts",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Spoofing",
                  "description": "The backend server can receive request from users that have their account's detail fulfilment of random/invalid information. This can lead to a repudiation threat, because it will be impossible to detect the real person behind the user information.",
                  "mitigation": "A possible strategy to reduce the likelihood of this type of operation is to require all users to validate their email before gaining access to any functionality of the system.This type of measure can reduce the motivation for attackers to make anonymous requests. \nNote: A more secure and robust mitigation strategy is to implement Know Your Client (KYC), but given the scope of the application, this may be a barrier to new users entering the platform, so we take some risk to gain more users.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 123,
                  "score": ""
                },
                {
                  "id": "6fe9f56f-27ef-4a35-b625-be9fbdaea100",
                  "title": "Poison messages",
                  "status": "Open",
                  "severity": "High",
                  "type": "Denial of service",
                  "description": "An attacker could generate a malicious message that the Backend cannot process.",
                  "mitigation": "Validate the content of all messages, before processing. Reject any message that have invalid content and log the rejection. Do not log the malicious content - instead log a description of the error.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 124,
                  "score": ""
                },
                {
                  "id": "3dec0685-e2d8-4a1f-ab45-e7e630fdc998",
                  "title": "Can't identify the user that performs the operation",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Repudiation",
                  "description": "There's a risk that requests will occur within the Backend without proper attribution to the responsible user if there's no mechanism for attribution.",
                  "mitigation": "Implementing an audit log is a possible mitigation strategy. It records all significant events within the system,  ensuring accountability and traceability.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 135,
                  "score": ""
                },
                {
                  "id": "59bb0860-3b62-4e8c-8b82-5a53d73db916",
                  "title": "Credentials exposure in repository",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Spoofing",
                  "description": "There's a risk of exposing credentials when source code is stored in a version control system and contains sensitive data such as usernames, passwords, or API keys.",
                  "mitigation": "To mitigate the risk of credential exposure, it's essential to avoid storing sensitive credentials directly in the codebase or version control repository. Instead, we should adopt secure credential management practices, such as using environment variables, configuration files outside of the repository, or a secure vault solution. ",
                  "modelType": "Generic",
                  "new": false,
                  "number": 150,
                  "score": ""
                },
                {
                  "id": "920770ec-ae91-4666-8542-a5bc7279cc7c",
                  "title": "Cross-Site Scripting (XSS) attacks",
                  "status": "Open",
                  "severity": "High",
                  "type": "Spoofing",
                  "description": "Cross-Site Scripting (XSS) poses a significant risk, allowing attackers to inject malicious scripts into web pages viewed by other users. By exploiting vulnerabilities in input fields or parameters, attackers can execute arbitrary code within the context of victims' browsers. ",
                  "mitigation": "To mitigate the risk of XSS attacks, we can implement secure coding practices and input validation mechanisms, sanitizing and validating user inputs, especially those that are rendered in web pages.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 176,
                  "score": ""
                },
                {
                  "id": "49474629-c0db-4201-affd-7853461b6ee5",
                  "title": "Must attend to principle of least privilege on DB access",
                  "status": "Open",
                  "severity": "High",
                  "type": "Tampering",
                  "description": "The component could be vulnerable to a tampering attack, where the attacker could maliciously modify some content in the database, such as deleting tables or changing profile database privileges.",
                  "mitigation": "One possible mitigation is to apply the principle of least privilege to the database used by this component. By granting only read/write access, we can minimize the damage provoked by this possible attack, where the attacker will be blocked from any admin operation.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 179,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 1346,
              "y": 235
            },
            "size": {
              "width": 110,
              "height": 120
            },
            "attrs": {
              "text": {
                "text": "Logging"
              },
              "body": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 18,
            "id": "7510958a-e38b-46f4-b600-28023a69f3b5",
            "data": {
              "type": "tm.Process",
              "name": "Logging",
              "description": "The logging application.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "handlesCardPayment": false,
              "handlesGoodsOrServices": false,
              "isWebApplication": false,
              "privilegeLevel": "",
              "threats": [
                {
                  "id": "536e9de6-07ea-4919-822f-9c2ab0f56f31",
                  "title": "Admin credentials not shared over systems",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "With shared administrative credentials with the web server, if the web server credentials are compromised, the logging system is also compromised.",
                  "mitigation": "One mitigation strategy is to guarantee that exists a specialized logging admin credentials to access the logging system, instead of using the same that is used by web server admin.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 126,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 1316,
              "y": 570
            },
            "size": {
              "width": 150,
              "height": 80
            },
            "attrs": {
              "text": {
                "text": "Logging  Database"
              },
              "topLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              },
              "bottomLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "store",
            "zIndex": 19,
            "id": "a0320430-247a-498d-a3bd-b6c8a56a486c",
            "data": {
              "type": "tm.Store",
              "name": "Logging  Database",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isALog": true,
              "isEncrypted": false,
              "isSigned": false,
              "storesCredentials": false,
              "storesInventory": false,
              "threats": [
                {
                  "id": "e12172e5-fda6-465d-aa9a-68095db83113",
                  "title": "Unauthorized access",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "An attacker could make an query call on the application DB.",
                  "mitigation": "Require all queries to be authenticated.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 138,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 1080,
              "y": 110
            },
            "size": {
              "width": 120,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "Message Queue"
              },
              "topLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              },
              "bottomLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "store",
            "zIndex": 20,
            "id": "a25eaaf1-874d-4941-9ca3-89ed48c7514e",
            "data": {
              "type": "tm.Store",
              "name": "Message Queue",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isALog": true,
              "isEncrypted": true,
              "isSigned": false,
              "storesCredentials": false,
              "storesInventory": false,
              "threats": [
                {
                  "id": "a8fddc0c-6f71-4ca3-b718-09b543e66894",
                  "title": "Message secrecy",
                  "status": "Open",
                  "severity": "Low",
                  "type": "Spoofing",
                  "description": "The data flow between the Backend/Middleware and the Logging System is not point-to-point and therefore end-to-end secrecy cannot be provided at the transport layer. Messages could be read by an attacker at rest in the Message Queue.",
                  "mitigation": "Encrypt messages before enqueuing. ",
                  "modelType": "Generic",
                  "new": false,
                  "number": 125,
                  "score": ""
                },
                {
                  "id": "e4f789d3-73c2-4a23-9708-803f9690dafe",
                  "title": "Fake messages could be placed on the queue",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Spoofing",
                  "description": "An attacker could put a fake message on queue, causing the Background Worker to do incorrect processing.",
                  "mitigation": "Restrict access to the queue to the IP addresses of the Web Server and Background Worker. Implement authentication on the queue endpoint.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 146,
                  "score": ""
                }
              ]
            }
          }
        ],
        "version": "2.2.0",
        "title": "DFD - Level 1 - System High Level",
        "description": "The Higher Level Abstraction diagram",
        "thumbnail": "./public/content/images/thumbnail.jpg",
        "id": 0,
        "diagramType": "Generic",
        "placeholder": "New generic diagram description"
      },
      {
        "id": 14,
        "title": "DFD - Level 2 - Two Factor Authentication Function",
        "diagramType": "Generic",
        "placeholder": "New generic diagram description",
        "thumbnail": "./public/content/images/thumbnail.jpg",
        "version": "2.2.0",
        "cells": [
          {
            "position": {
              "x": 1296,
              "y": 470
            },
            "size": {
              "width": 160,
              "height": 80
            },
            "attrs": {
              "text": {
                "text": "Database"
              },
              "topLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              },
              "bottomLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "store",
            "zIndex": 2,
            "id": "936557f9-22e2-4bac-bb70-0089c5c2fbe1",
            "data": {
              "name": "Database",
              "description": "Database that stores the application relevant data.",
              "type": "tm.Store",
              "isTrustBoundary": false,
              "outOfScope": false,
              "reasonOutOfScope": "",
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "description": "An attacker could make an query call on the DB.",
                  "title": "Unauthorized access",
                  "type": "Information disclosure",
                  "mitigation": "Require all queries to be authenticated.",
                  "modelType": "STRIDE",
                  "id": "d0fe1c3d-1021-45d5-9e5b-95614e0a4686",
                  "new": false
                }
              ],
              "hasOpenThreats": true,
              "isALog": false,
              "storesCredentials": true,
              "isEncrypted": false,
              "isSigned": false,
              "storesInventory": null
            }
          },
          {
            "position": {
              "x": 135,
              "y": 235
            },
            "size": {
              "width": 110,
              "height": 110
            },
            "attrs": {
              "text": {
                "text": "Login Page"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 6,
            "id": "0d9909ea-1398-4898-be81-cf1c808324dc",
            "data": {
              "name": "Login Page",
              "description": "The login page that has the form to the user do the login.",
              "type": "tm.Process",
              "isTrustBoundary": false,
              "outOfScope": false,
              "reasonOutOfScope": "",
              "threats": [],
              "hasOpenThreats": false,
              "isWebApplication": true,
              "handlesCardPayment": null,
              "handlesGoodsOrServices": null,
              "privilegeLevel": "User"
            }
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "f8ec08ec-3182-45c8-a723-08692778147e",
            "source": {
              "x": -140,
              "y": 90
            },
            "target": {
              "x": 550,
              "y": 80
            },
            "vertices": [
              {
                "x": -10,
                "y": 140
              },
              {
                "x": 200,
                "y": 170
              },
              {
                "x": 400,
                "y": 140
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Login attempt response",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "96a9d448-1b82-4194-a6f1-1ef39fdc1aec",
                  "title": "Data flow should use HTTP/S ",
                  "status": "Open",
                  "severity": "High",
                  "type": "Spoofing",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker. ",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 143,
                  "score": ""
                }
              ]
            },
            "id": "74109fc1-71a2-4026-bf94-ba1b3c0ebb48",
            "labels": [
              "Login attempt response"
            ],
            "source": {
              "cell": "2314cae0-6d2a-43b9-8134-335451130384"
            },
            "target": {
              "cell": "5422dc91-cc60-4977-8206-20a806f58b7b"
            },
            "vertices": [
              {
                "x": 820,
                "y": 280
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Query Response",
              "description": "SQL Query Result.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": false,
              "protocol": "TCP/IP",
              "threats": [
                {
                  "id": "c42fa2b7-98bf-4cc2-bdf8-f0676e3c27e4",
                  "title": "Credential Exposure",
                  "status": "Open",
                  "severity": "Low",
                  "type": "Information disclosure",
                  "description": "If database credentials are transmitted insecurely, they could be intercepted and used by an attacker to gain unauthorized access.",
                  "mitigation": "Always use encrypted connections for transmitting credentials and employ robust authentication mechanisms.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 144,
                  "score": ""
                }
              ]
            },
            "id": "ee74cae1-92c2-4e3c-b8f6-01d8bc80e565",
            "labels": [
              "Query Response"
            ],
            "source": {
              "cell": "936557f9-22e2-4bac-bb70-0089c5c2fbe1"
            },
            "target": {
              "cell": "5422dc91-cc60-4977-8206-20a806f58b7b"
            },
            "vertices": [
              {
                "x": 1270,
                "y": 390
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Query user account / Code compatibility check",
              "description": "Represents the query done to check the user account info or the 2FA code.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": false,
              "protocol": "TCP/IP",
              "threats": [
                {
                  "id": "a0c197b2-b0a3-48ad-8317-6215be53380d",
                  "title": "Man in the middle attack",
                  "status": "Open",
                  "severity": "Low",
                  "type": "Information disclosure",
                  "description": "An attacker could intercept the DB queries in transit and obtain sensitive information, such as DB credentials, query parameters or query results (is unlikely since the data flow is over a private network).",
                  "mitigation": "Enforce an encrypted connection at the DB server",
                  "modelType": "Generic",
                  "new": false,
                  "number": 127,
                  "score": ""
                },
                {
                  "id": "51857fc4-c5e1-4a6d-8206-f9539ea58120",
                  "title": "SQL Injection",
                  "status": "Open",
                  "severity": "High",
                  "type": "Tampering",
                  "description": "Attackers can manipulate the SQL auth queries by injecting malicious SQL code through input fields that interface with the database.",
                  "mitigation": "Use prepared statements and parameterized queries to handle SQL commands. Never concatenate user input directly into SQL queries. Regularly validate and sanitize all user inputs.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 136,
                  "score": ""
                }
              ]
            },
            "id": "d8d699dd-b17e-4f77-a453-8e76249fb049",
            "labels": [
              "Query user account / Code compatibility check"
            ],
            "source": {
              "cell": "5422dc91-cc60-4977-8206-20a806f58b7b"
            },
            "target": {
              "cell": "936557f9-22e2-4bac-bb70-0089c5c2fbe1"
            },
            "vertices": [
              {
                "x": 1140,
                "y": 450
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Read/Write Request",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": false,
              "protocol": "TCP/IP",
              "threats": [
                {
                  "id": "28372b2f-62ae-438b-947a-5f4ab05a7f16",
                  "title": "Credentials exposure",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Tampering",
                  "description": "Provide a description for this threat",
                  "mitigation": "Provide remediation for this threat or a reason if status is N/A",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 191,
                  "score": ""
                }
              ]
            },
            "id": "0e5e35b8-9da5-418b-bd6f-51cb46f4c22c",
            "labels": [
              "Read/Write Request"
            ],
            "source": {
              "cell": "7510958a-e38b-46f4-b600-28023a69f3b5"
            },
            "target": {
              "cell": "a0320430-247a-498d-a3bd-b6c8a56a486c"
            },
            "vertices": [
              {
                "x": 1600,
                "y": 340
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Data Response",
              "description": "Reads and writes data into the logging database.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": false,
              "protocol": "TCP/IP",
              "threats": [
                {
                  "id": "5313efcd-12fe-435e-b898-0ac7766dc790",
                  "title": "Credential Exposure",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "If database credentials are transmitted insecurely, they could be intercepted and used by an attacker to gain unauthorized access.",
                  "mitigation": "Always use encrypted connections for transmitting credentials and employ robust authentication mechanisms.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 145,
                  "score": ""
                }
              ]
            },
            "id": "4d292566-83b7-4f13-ac00-43947a8fb6bf",
            "labels": [
              "Data Response"
            ],
            "source": {
              "cell": "a0320430-247a-498d-a3bd-b6c8a56a486c"
            },
            "target": {
              "cell": "7510958a-e38b-46f4-b600-28023a69f3b5"
            },
            "vertices": [
              {
                "x": 1560,
                "y": 230
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Put Message",
              "description": "Writes a new log at end of the queue.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "AMQP",
              "threats": [
                {
                  "id": "49eeccfb-e70f-49bf-9cc1-c7868768d212",
                  "title": "Message should be encrypted",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "There's a risk of messages being intercepted by some attacker that can gain access to sensitive information with unauthorized access.",
                  "mitigation": "A mitigation strategy can be using encryption on the communication. This encryption should be end-to-end, meaning that only authorized parties possess the keys necessary to decrypt and access the contents of the messages. Using RabbitMQ we can use SSL (https://www.rabbitmq.com/docs/ssl)",
                  "modelType": "Generic",
                  "new": false,
                  "number": 148,
                  "score": ""
                }
              ]
            },
            "id": "4ec880dc-aafa-47ab-b6f2-947189932095",
            "labels": [
              "Put Message"
            ],
            "source": {
              "cell": "5422dc91-cc60-4977-8206-20a806f58b7b"
            },
            "target": {
              "cell": "a25eaaf1-874d-4941-9ca3-89ed48c7514e"
            },
            "vertices": [
              {
                "x": 1080,
                "y": 230
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Get Message",
              "description": "Dequeue message and stores it on the logging database.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "AMQP",
              "threats": [
                {
                  "id": "ba20d29f-57db-43d2-a3ae-1b3f2ecbefe0",
                  "title": "Message should be encrypted",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "There's a risk of messages being intercepted by some attacker that can gain access to sensitive information with unauthorized access.",
                  "mitigation": "A mitigation strategy can be using encryption on the communication. This encryption should be end-to-end, meaning that only authorized parties possess the keys necessary to decrypt and access the contents of the messages. Using RabbitMQ we can use SSL (https://www.rabbitmq.com/docs/ssl).",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 190,
                  "score": ""
                }
              ]
            },
            "id": "099e649b-8167-4391-8396-3ccd243e110a",
            "labels": [
              "Get Message"
            ],
            "source": {
              "cell": "a25eaaf1-874d-4941-9ca3-89ed48c7514e"
            },
            "target": {
              "cell": "7510958a-e38b-46f4-b600-28023a69f3b5"
            },
            "vertices": [
              {
                "x": 1190,
                "y": 240
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "4f98d04a-1de2-4bf7-bca3-14c1cc1b3554",
            "source": {
              "x": 730,
              "y": 250
            },
            "target": {
              "x": 750,
              "y": 410
            },
            "vertices": [
              {
                "x": 780,
                "y": 310
              },
              {
                "x": 780,
                "y": 350
              },
              {
                "x": 760,
                "y": 400
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Put message",
              "description": "Writes a new log at end of the queue.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "AMQP",
              "threats": [
                {
                  "id": "cdd24d7e-46dd-4ea7-ae47-552a551a9bf4",
                  "title": "Message should be encrypted",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "There's a risk of messages being intercepted by some attacker that can gain access to sensitive information with unauthorized access.",
                  "mitigation": "A mitigation strategy can be using encryption on the communication. This encryption should be end-to-end, meaning that only authorized parties possess the keys necessary to decrypt and access the contents of the messages. Using RabbitMQ we can use SSL (https://www.rabbitmq.com/docs/ssl).",
                  "modelType": "Generic",
                  "new": false,
                  "number": 147,
                  "score": ""
                }
              ]
            },
            "id": "f8b8af6f-6f48-4461-af25-cef610bf3b44",
            "labels": [
              "Put message"
            ],
            "source": {
              "cell": "2314cae0-6d2a-43b9-8134-335451130384"
            },
            "target": {
              "cell": "a25eaaf1-874d-4941-9ca3-89ed48c7514e"
            },
            "vertices": [
              {
                "x": 780,
                "y": 140
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Send SMS Request",
              "description": "Endpoint to call on the external API to send the SMS with the 2FA code.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "231bd3c0-4596-4a54-a9d8-cc319b867a55",
                  "title": "Compromised third party service",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Tampering",
                  "description": "Risk of using a compromised third party service.",
                  "mitigation": "Having multiple alternatives provides the ability of deactivating the compromised API, reducing the risk of malicious actors tampering the email sending functionality or intercepting sensitive data transmitted through the compromised API.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 188,
                  "score": ""
                }
              ]
            },
            "id": "4d918b49-5f35-4d54-897a-4ac202b0d067",
            "labels": [
              "Send SMS Request"
            ],
            "source": {
              "cell": "5422dc91-cc60-4977-8206-20a806f58b7b"
            },
            "target": {
              "cell": "af21ae9f-3718-4a0f-a8d3-fe18b9b00c62"
            },
            "vertices": [
              {
                "x": 820,
                "y": 480
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "a9aeb5e7-2f26-400e-9243-43e25025bcab",
            "source": {
              "x": 1290,
              "y": 140
            },
            "target": {
              "x": 1000,
              "y": 60
            },
            "vertices": [
              {
                "x": 1200,
                "y": 300
              },
              {
                "x": 950,
                "y": 180
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Response",
              "description": "Response from the API.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "f079a1bc-0104-455e-b5ec-7be797d21457",
                  "title": "Compromised third party service",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Tampering",
                  "description": "Risk of using a compromised third party service.",
                  "mitigation": "Having multiple alternatives provides the ability of deactivating the compromised API, reducing the risk of malicious actors tampering the email sending functionality or intercepting sensitive data transmitted through the compromised API.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 189,
                  "score": ""
                }
              ]
            },
            "id": "a8a33d0d-d207-4193-af72-cd4ccbfb0c8b",
            "labels": [
              "Response"
            ],
            "source": {
              "cell": "af21ae9f-3718-4a0f-a8d3-fe18b9b00c62"
            },
            "target": {
              "cell": "5422dc91-cc60-4977-8206-20a806f58b7b"
            },
            "vertices": [
              {
                "x": 950,
                "y": 490
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "db7e5950-79b7-43cd-8ff9-20e000ee9375",
            "source": {
              "x": 660,
              "y": 560
            },
            "target": {
              "x": 910,
              "y": 650
            },
            "vertices": [
              {
                "x": 830,
                "y": 530
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Login Initial Request",
              "description": "The user fills in the login form.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "isBidirectional": false,
              "isEncrypted": false,
              "isPublicNetwork": true,
              "protocol": "",
              "threats": []
            },
            "id": "f2f3bc72-e813-47e6-9dd8-fb6d5986c086",
            "labels": [
              "Login Initial Request"
            ],
            "source": {
              "x": -60,
              "y": 50
            },
            "target": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "vertices": [
              {
                "x": 20,
                "y": 295.5
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Login Initial Response",
              "description": "The response after the system had process the login attempt. ",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "isBidirectional": false,
              "isEncrypted": false,
              "isPublicNetwork": true,
              "protocol": "",
              "threats": []
            },
            "id": "5fc039a0-7b18-4809-bd42-867dcc183458",
            "labels": [
              "Login Initial Response"
            ],
            "source": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "target": {
              "x": -20,
              "y": 40
            },
            "vertices": [
              {
                "x": 60,
                "y": 160
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Insertion of Code (2FA) Request",
              "description": "The user puts the code that received for the 2FA in the form.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "isBidirectional": false,
              "isEncrypted": false,
              "isPublicNetwork": true,
              "protocol": "",
              "threats": []
            },
            "id": "0d456190-beb9-45a2-b837-b1e623024b06",
            "labels": [
              "Insertion of Code (2FA) Request"
            ],
            "source": {
              "x": 350,
              "y": 50
            },
            "target": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "vertices": [
              {
                "x": 260,
                "y": 110
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Final Login Response",
              "description": "The login response.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "isBidirectional": false,
              "isEncrypted": false,
              "isPublicNetwork": true,
              "protocol": "",
              "threats": []
            },
            "id": "f1438ab7-531e-49ae-adb9-cb5e49cb7daf",
            "labels": [
              "Final Login Response"
            ],
            "source": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "target": {
              "x": 390,
              "y": 50
            },
            "vertices": [
              {
                "x": 340,
                "y": 210
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Response of 2FA code validation",
              "description": "The response that says if the user sent a valid or not valid 2FA code.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "0075a495-9527-4bd2-ac29-759db69b1416",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Information disclosure",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker. ",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 185,
                  "score": ""
                }
              ]
            },
            "id": "41d43a52-ebec-40c9-b28c-bc4c365fefed",
            "labels": [
              "Response of 2FA code validation"
            ],
            "source": {
              "cell": "2314cae0-6d2a-43b9-8134-335451130384"
            },
            "target": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "vertices": [
              {
                "x": 400,
                "y": 400
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Response of 2FA code validation",
              "description": "The response that says if the user sent a valid or not valid 2FA code.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "9c432874-062d-46f7-b6c7-1aa350286e07",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker. ",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 187,
                  "score": ""
                }
              ]
            },
            "id": "eff0af7c-3cdb-403d-9f56-34a6d23dae1a",
            "labels": [
              "Response of 2FA code validation"
            ],
            "source": {
              "cell": "5422dc91-cc60-4977-8206-20a806f58b7b"
            },
            "target": {
              "cell": "2314cae0-6d2a-43b9-8134-335451130384"
            },
            "vertices": [
              {
                "x": 790,
                "y": 380
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "3d3f7757-33e6-4599-974a-ee88572dea23",
            "source": {
              "x": 1270,
              "y": 550
            },
            "target": {
              "x": 1380,
              "y": 420
            },
            "vertices": [
              {
                "x": 1290,
                "y": 460
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "99c32799-8bca-4fdf-bf06-ad395fc5c842",
            "source": {
              "x": 1720,
              "y": 390
            },
            "target": {
              "x": 1720,
              "y": 180
            },
            "vertices": [
              {
                "x": 1650,
                "y": 290
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "sendCodeConfimation()",
              "description": "The endpoint that is called in order to confirm the 2FA code received by the user.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "04123648-1eb1-4963-bbdc-efd810ebe29d",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker. ",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 184,
                  "score": ""
                }
              ]
            },
            "id": "b0c2eb6c-521f-407a-b979-e6113b52ac32",
            "labels": [
              "sendCodeConfimation()"
            ],
            "source": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "target": {
              "cell": "2314cae0-6d2a-43b9-8134-335451130384"
            },
            "vertices": [
              {
                "x": 400,
                "y": 350
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "doLogin()",
              "description": "Call the login endpoint.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "dbe45eff-7c99-44a2-a3b3-291545dc8de4",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker.",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 140,
                  "score": ""
                }
              ]
            },
            "id": "c124f88f-776b-4cba-aad2-3879d8a5ccba",
            "labels": [
              "doLogin()"
            ],
            "source": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "target": {
              "cell": "2314cae0-6d2a-43b9-8134-335451130384"
            },
            "vertices": [
              {
                "x": 410,
                "y": 240
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Forward doLogin()",
              "description": "The forward request of the login",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "277d318c-579c-4106-b1e6-6e44d689d890",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker. ",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 142,
                  "score": ""
                }
              ]
            },
            "id": "acb53f32-0efb-41e0-abd2-6e8896cf41a7",
            "labels": [
              "Forward doLogin()"
            ],
            "source": {
              "cell": "2314cae0-6d2a-43b9-8134-335451130384"
            },
            "target": {
              "cell": "5422dc91-cc60-4977-8206-20a806f58b7b"
            },
            "vertices": [
              {
                "x": 810,
                "y": 230
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "405df1fa-dab1-4c82-a12d-beb3da96ea79",
            "source": {
              "x": 420,
              "y": 220
            },
            "target": {
              "x": 410,
              "y": 440
            },
            "vertices": [
              {
                "x": 490,
                "y": 240
              },
              {
                "x": 510,
                "y": 330
              },
              {
                "x": 480,
                "y": 420
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Login attempt response",
              "description": "The response of the first attempt login.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "f158ac37-6605-4131-9b71-2bf0fe11ea3c",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker. ",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 141,
                  "score": ""
                }
              ]
            },
            "id": "217204ef-4b9a-480e-8034-e225395869e7",
            "labels": [
              "Login attempt response"
            ],
            "source": {
              "cell": "2314cae0-6d2a-43b9-8134-335451130384"
            },
            "target": {
              "cell": "0d9909ea-1398-4898-be81-cf1c808324dc"
            },
            "vertices": [
              {
                "x": 410,
                "y": 295.5
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Code F2A Request Forward",
              "description": "The endpoint that is called in order to confirm the 2FA code received by the user.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "1899d7dc-a88b-4f6a-848e-712b393b29e5",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker. ",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 186,
                  "score": ""
                }
              ]
            },
            "id": "1a823edb-3240-4565-add6-4dabedc76ee1",
            "labels": [
              "Code F2A Request Forward"
            ],
            "source": {
              "cell": "2314cae0-6d2a-43b9-8134-335451130384"
            },
            "target": {
              "cell": "5422dc91-cc60-4977-8206-20a806f58b7b"
            },
            "vertices": [
              {
                "x": 800,
                "y": 340
              }
            ]
          },
          {
            "position": {
              "x": -70,
              "y": -20
            },
            "size": {
              "width": 520,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "All users"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "actor",
            "zIndex": 11,
            "id": "1e15237e-2057-4b49-b20c-6c073eb16bd7",
            "data": {
              "type": "tm.Actor",
              "name": "All users",
              "description": "This Actor abstract all users of the application (Users, Property Owners and Business Admins)",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "providesAuthentication": false,
              "threats": []
            }
          },
          {
            "position": {
              "x": 525.5,
              "y": 245
            },
            "size": {
              "width": 110,
              "height": 120
            },
            "attrs": {
              "text": {
                "text": "Middleware"
              },
              "body": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 16,
            "id": "2314cae0-6d2a-43b9-8134-335451130384",
            "data": {
              "type": "tm.Process",
              "name": "Middleware",
              "description": "Responsible for request rate limiting, filtering, validation and sanitization before it reaches the backend.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "handlesCardPayment": false,
              "handlesGoodsOrServices": false,
              "isWebApplication": false,
              "privilegeLevel": "User",
              "threats": [
                {
                  "id": "1a9981f7-647d-49c3-ba6f-da995cf77a82",
                  "title": "Middleware Interruption",
                  "status": "Open",
                  "severity": "High",
                  "type": "Denial of service",
                  "description": "It's possible that the entry of the Middleware server can be target of a high demand requests by malicious actors with a high volume of traffic, overwhelming its resources and making it unable to respond to legitimate user requests. This results on the server of the application to becoming inaccessible or slow to respond for genuine users, disrupting its normal functioning.",
                  "mitigation": "One effective mitigation strategy is to implement a rate limiting and traffic filter mechanism, satisfying only the organic requests made by genuine users and blocking all suspicious interaction. ",
                  "modelType": "Generic",
                  "new": false,
                  "number": 117,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 921,
              "y": 250
            },
            "size": {
              "width": 110,
              "height": 110
            },
            "attrs": {
              "text": {
                "text": "Backend Login Process"
              },
              "body": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 17,
            "id": "5422dc91-cc60-4977-8206-20a806f58b7b",
            "data": {
              "type": "tm.Process",
              "name": "Backend Login Process",
              "description": "The application backend that orchestrates the logic of login/2FA.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "handlesCardPayment": false,
              "handlesGoodsOrServices": false,
              "isWebApplication": false,
              "privilegeLevel": "Middleware",
              "threats": [
                {
                  "id": "1359ca12-3f1c-4a1d-b337-0c3d91557957",
                  "title": "Unknow origin from the senders ",
                  "status": "Open",
                  "severity": "High",
                  "type": "Repudiation",
                  "description": "The backend can receive brute force attacks for the login, and it can happen that we don't know where the origin is.",
                  "mitigation": "To mitigate this we can obtain the network information about the sender, e.g. like IP address.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 123,
                  "score": ""
                },
                {
                  "id": "6fe9f56f-27ef-4a35-b625-be9fbdaea100",
                  "title": "Poison messages",
                  "status": "Open",
                  "severity": "High",
                  "type": "Denial of service",
                  "description": "An attacker could generate a malicious message that the Backend cannot process.",
                  "mitigation": "Validate the content of all messages, before processing. Reject any message that have invalid content and log the rejection. Do not log the malicious content - instead log a description of the error.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 124,
                  "score": ""
                },
                {
                  "id": "eaa7dcf1-963d-4769-8e4b-7505515479b2",
                  "title": "Many retries failed",
                  "status": "Open",
                  "severity": "High",
                  "type": "Spoofing",
                  "description": "There is an possibility of a brute force attack on the password or the code of 2FA.",
                  "mitigation": "A mitigation strategy can be block the victims account after 3 failed attacks, (3 for each operation), in order to preserve the integrity of the user's account.",
                  "modelType": "STRIDE",
                  "new": false,
                  "number": 155,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 1346,
              "y": 235
            },
            "size": {
              "width": 110,
              "height": 120
            },
            "attrs": {
              "text": {
                "text": "Logging"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 18,
            "id": "7510958a-e38b-46f4-b600-28023a69f3b5",
            "data": {
              "type": "tm.Process",
              "name": "Logging",
              "description": "Logging server.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "handlesCardPayment": false,
              "handlesGoodsOrServices": false,
              "isWebApplication": false,
              "privilegeLevel": "",
              "threats": []
            }
          },
          {
            "position": {
              "x": 1720,
              "y": 260
            },
            "size": {
              "width": 120,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "Logging  Databse"
              },
              "topLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              },
              "bottomLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "store",
            "zIndex": 19,
            "id": "a0320430-247a-498d-a3bd-b6c8a56a486c",
            "data": {
              "type": "tm.Store",
              "name": "Logging  Databse",
              "description": "Database that stores the logs.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isALog": true,
              "isEncrypted": false,
              "isSigned": false,
              "storesCredentials": false,
              "storesInventory": false,
              "threats": [
                {
                  "id": "e12172e5-fda6-465d-aa9a-68095db83113",
                  "title": "Unauthorized access",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Information disclosure",
                  "description": "An attacker could make an query call on the application DB.",
                  "mitigation": "Require all queries to be authenticated.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 138,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 1080,
              "y": 110
            },
            "size": {
              "width": 120,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "Message Queue"
              },
              "topLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              },
              "bottomLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "store",
            "zIndex": 20,
            "id": "a25eaaf1-874d-4941-9ca3-89ed48c7514e",
            "data": {
              "type": "tm.Store",
              "name": "Message Queue",
              "description": "",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isALog": true,
              "isEncrypted": true,
              "isSigned": false,
              "storesCredentials": false,
              "storesInventory": false,
              "threats": [
                {
                  "id": "a8fddc0c-6f71-4ca3-b718-09b543e66894",
                  "title": "Message secrecy",
                  "status": "Open",
                  "severity": "Low",
                  "type": "Information disclosure",
                  "description": "The data flow between the Web Application and the Background Worker is not point-to-point and therefore end-to-end secrecy cannot be provided at the transport layer. Messages could be read by an attacker at rest in the Message Queue.",
                  "mitigation": "Encrypt messages before enqueuing. ",
                  "modelType": "Generic",
                  "new": false,
                  "number": 125,
                  "score": ""
                },
                {
                  "id": "e4f789d3-73c2-4a23-9708-803f9690dafe",
                  "title": "Fake messages could be placed on the queue",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Spoofing",
                  "description": "An attacker could put a fake message on queue, causing the Logging to do incorrect processing.",
                  "mitigation": "Restrict access to the queue to the IP addresses of the Middleware and Backend. Implement authentication on the queue endpoint.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 146,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 700,
              "y": 550
            },
            "size": {
              "width": 110,
              "height": 130
            },
            "attrs": {
              "text": {
                "text": "Twilio API"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1.5,
                "strokeDasharray": "4 3"
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 21,
            "id": "af21ae9f-3718-4a0f-a8d3-fe18b9b00c62",
            "data": {
              "type": "tm.Process",
              "name": "Twilio API",
              "description": "Third party service that handles the SMS sending.",
              "outOfScope": true,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "handlesCardPayment": false,
              "handlesGoodsOrServices": false,
              "isWebApplication": false,
              "privilegeLevel": "Backend",
              "threats": []
            }
          }
        ],
        "description": "Two Factor Authentication Function diagram"
      },
      {
        "id": 77,
        "title": "DFD - Level 2 - Approve/Reject Review Function",
        "diagramType": "Generic",
        "placeholder": "New generic diagram description",
        "thumbnail": "./public/content/images/thumbnail.jpg",
        "version": "2.2.0",
        "cells": [
          {
            "position": {
              "x": 116.25,
              "y": 270
            },
            "size": {
              "width": 100,
              "height": 90
            },
            "attrs": {
              "text": {
                "text": "Pending reviews page"
              },
              "body": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 1,
            "id": "8ca93a9a-e03c-4122-876e-54eebf756241",
            "data": {
              "type": "tm.Process",
              "name": "Pending reviews page",
              "description": "Pending reviews page in the application frontend.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "handlesCardPayment": false,
              "handlesGoodsOrServices": false,
              "isWebApplication": true,
              "privilegeLevel": "Business Admin",
              "threats": [
                {
                  "id": "4644b58f-9acf-4cf0-b048-8770252b99b7",
                  "title": "Physically Insecure System",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Elevation of privilege",
                  "description": "An attacker can physically access the pending reviews list and manipulate them.",
                  "mitigation": "I mitigation can be the re-login when accessing the pending reviews list. Another possibility would be the re-login on each approval/rejection. But that would take the user to an over consuming time.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 28,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 116.25,
              "y": 70
            },
            "size": {
              "width": 112.5,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "Business Admin"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "actor",
            "zIndex": 2,
            "id": "abaab3c9-ef0f-4b4b-9379-626af308aadd",
            "data": {
              "type": "tm.Actor",
              "name": "Business Admin",
              "description": "The Web App Business Admin.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "providesAuthentication": true,
              "threats": []
            }
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Approve/Reject review request",
              "description": "Approve/Reject review request data flow.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": false,
              "isPublicNetwork": false,
              "protocol": "",
              "threats": [
                {
                  "id": "5f2d34e5-5d85-4aaa-8bb6-4e932484aa93",
                  "title": "Accessing another user’s credentials",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Spoofing",
                  "description": "The request could be done by an attacker that had access to the user's password through various means, such as phishing or intercepting login credentials, and because of that, the attacker can gain unauthorized access to the pending reviews page and approve or reject reviews.",
                  "mitigation": "Two-Factor Authentication (2FA) adds an extra layer of security by requiring users to provide a second form of authentication, with a code sent to the mobile device, in addition to their password. Even if an attacker manages to steal the user's password, they would still need this second factor to access the account.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 9,
                  "score": ""
                }
              ]
            },
            "id": "9a667838-d4a4-470e-b591-aa4cddb59be9",
            "labels": [
              "Approve/Reject review request"
            ],
            "source": {
              "cell": "abaab3c9-ef0f-4b4b-9379-626af308aadd"
            },
            "target": {
              "cell": "8ca93a9a-e03c-4122-876e-54eebf756241"
            },
            "vertices": [
              {
                "x": 70,
                "y": 270
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "ApproveRejectReview()",
              "description": "Web request with the review ID to accept/reject.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "be65759e-14c0-4897-ae7e-79fad56429a0",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "These requests are made over the public internet and could be intercepted by an attacker.",
                  "mitigation": "The requests should require HTTP/S. This will provide confidentiality and integrity. HTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 4,
                  "score": ""
                }
              ]
            },
            "id": "61be3620-f270-4cc8-b87b-bb172e503ad4",
            "labels": [
              "ApproveRejectReview()"
            ],
            "source": {
              "cell": "8ca93a9a-e03c-4122-876e-54eebf756241"
            },
            "target": {
              "cell": "9b57f1fd-680a-4f9b-9a0c-d3d4db27dcbd"
            },
            "vertices": [
              {
                "x": 360,
                "y": 360
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Approve/RejectReview() response",
              "description": "Web response with the review updated status.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "3e8cbc22-11bb-4535-8d73-b317d6a57785",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "These requests are made over the public internet and could be intercepted by an attacker.",
                  "mitigation": "The requests should require HTTP/S. This will provide confidentiality and integrity. HTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 3,
                  "score": ""
                }
              ]
            },
            "id": "4c5a5537-2b8a-41b5-aeed-98ffedc01aef",
            "labels": [
              "Approve/RejectReview() response"
            ],
            "source": {
              "cell": "9b57f1fd-680a-4f9b-9a0c-d3d4db27dcbd"
            },
            "target": {
              "cell": "8ca93a9a-e03c-4122-876e-54eebf756241"
            },
            "vertices": [
              {
                "x": 360,
                "y": 270
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "ApproveRejectReview()",
              "description": "Web request with the review ID to accept/reject.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "fb0e5898-20c2-454b-8120-a09a1dc38be9",
                  "title": "Data flow should use HTTP/S ",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "These requests are made over the public internet and could be intercepted by an attacker.",
                  "mitigation": "These requests should require HTTP/S.This will provide confidentially and integrity. HTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 12,
                  "score": ""
                }
              ]
            },
            "id": "2b8a1eb3-c0a4-4234-bc1b-e9c84158cfb0",
            "labels": [
              "ApproveRejectReview()"
            ],
            "source": {
              "cell": "9b57f1fd-680a-4f9b-9a0c-d3d4db27dcbd"
            },
            "target": {
              "cell": "6ed5ac14-923d-4e4c-a5c8-ea885c7eefae"
            },
            "vertices": [
              {
                "x": 750,
                "y": 350
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "ApproveRejectReview() response",
              "description": "Web response with the review updated status.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "62193859-a687-4d9f-b037-b9a90e660422",
                  "title": "Data flow should use HTTP/S ",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "These requests are made over the public internet and could be intercepted by an attacker.",
                  "mitigation": "These requests should require HTTP/S.This will provide confidentially and integrity. HTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 11,
                  "score": ""
                }
              ]
            },
            "id": "5000c1d7-1541-4a4a-98bc-61c9dc0769c4",
            "labels": [
              "ApproveRejectReview() response"
            ],
            "source": {
              "cell": "6ed5ac14-923d-4e4c-a5c8-ea885c7eefae"
            },
            "target": {
              "cell": "9b57f1fd-680a-4f9b-9a0c-d3d4db27dcbd"
            },
            "vertices": [
              {
                "x": 740,
                "y": 280
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "B1",
              "description": "Business Admin / Pending reviews page Boundary.",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "6db34caf-110b-423d-a1f4-0b11841f586e",
            "labels": [
              "B1"
            ],
            "source": {
              "x": -20,
              "y": 250
            },
            "target": {
              "x": 380,
              "y": 180
            },
            "vertices": [
              {
                "x": 170,
                "y": 250
              },
              {
                "x": 320,
                "y": 230
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Query result",
              "description": "Update review query result.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": false,
              "protocol": "TCP/IP",
              "threats": [
                {
                  "id": "a84f1a95-2d64-44f2-b859-0e95113cadc3",
                  "title": "Man in the middle attack",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Information disclosure",
                  "description": "An attacker could intercept the DB queries in transit and obtain sensitive information, such as DB credentials, query parameters or query results (is unlikely since the data flow is over a private network).",
                  "mitigation": "Enforce an encrypted connection at the DB server.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 14,
                  "score": ""
                },
                {
                  "id": "9dde469c-ba1a-4455-a06d-99666688ecea",
                  "title": "Credential Exposure",
                  "status": "Open",
                  "severity": "Low",
                  "type": "Information disclosure",
                  "description": "If database credentials are transmitted insecurely, they could be intercepted and used by an attacker to gain unauthorized access.",
                  "mitigation": "Always use encrypted connections for transmitting credentials and employ robust authentication mechanisms.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 23,
                  "score": ""
                }
              ]
            },
            "id": "149a29ef-3a37-4465-9370-8bdf51aa9153",
            "labels": [
              "Query result"
            ],
            "source": {
              "cell": "cab91efc-fa06-4d42-a328-165a330d35d6"
            },
            "target": {
              "cell": "6ed5ac14-923d-4e4c-a5c8-ea885c7eefae"
            },
            "vertices": [
              {
                "x": 1108.75,
                "y": 480
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Update review query",
              "description": "Query to update the requested review status to approved or rejected.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": false,
              "protocol": "TCP/IP",
              "threats": [
                {
                  "id": "55c8efdb-4f29-481e-b77c-4a7eebaca420",
                  "title": "SQL Injection",
                  "status": "Open",
                  "severity": "High",
                  "type": "Tampering",
                  "description": "Attackers can manipulate the SQL auth queries by injecting malicious SQL code through input fields that interface with the database.",
                  "mitigation": "Use prepared statements and parameterized queries to handle SQL commands. Never concatenate user input directly into SQL queries. Regularly validate and sanitize all user inputs.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 19,
                  "score": ""
                },
                {
                  "id": "b735fc5e-51d1-498c-8817-b6ea00bcd76e",
                  "title": "Must attend to principle of least privilege on DB access",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Tampering",
                  "description": "The component could be vulnerable to a tampering attack, where the attacker could maliciously modify some content in the database, such as deleting tables or changing profile database privileges.",
                  "mitigation": "One possible mitigation is to apply the principle of least privilege to the database used by this component. By granting only read/write access, we can minimize the damage provoked by this possible attack, where the attacker will be blocked from any admin operation.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 29,
                  "score": ""
                },
                {
                  "id": "53ccd27d-8808-4ad1-8f7c-0311c7a4173f",
                  "title": "Man in the middle attack",
                  "status": "Open",
                  "severity": "Low",
                  "type": "Information disclosure",
                  "description": "An attacker could intercept the DB queries in transit and obtain sensitive information, such as DB credentials, query parameters or query results (is unlikely since the data flow is over a private network).",
                  "mitigation": "Enforce an encrypted connection at the DB server",
                  "modelType": "Generic",
                  "new": false,
                  "number": 32,
                  "score": ""
                }
              ]
            },
            "id": "9e4d9577-3e61-41a9-bd79-e6940b5150dd",
            "labels": [
              "Update review query"
            ],
            "source": {
              "cell": "6ed5ac14-923d-4e4c-a5c8-ea885c7eefae"
            },
            "target": {
              "cell": "cab91efc-fa06-4d42-a328-165a330d35d6"
            },
            "vertices": [
              {
                "x": 968.75,
                "y": 480
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Aprove/Reject Review response ",
              "description": "Aprove/Reject Review response data flow.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "isBidirectional": false,
              "isEncrypted": false,
              "isPublicNetwork": false,
              "protocol": "",
              "threats": []
            },
            "id": "ee9034c1-65ec-4f3f-af70-a3869824b6db",
            "labels": [
              "Aprove/Reject Review response "
            ],
            "source": {
              "cell": "8ca93a9a-e03c-4122-876e-54eebf756241"
            },
            "target": {
              "cell": "abaab3c9-ef0f-4b4b-9379-626af308aadd"
            },
            "vertices": [
              {
                "x": 250,
                "y": 170
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "B3",
              "description": "Middleware and Backend / Database Boundary.",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "53620577-9bb3-4c59-94ea-52d259744d33",
            "labels": [
              "B3"
            ],
            "source": {
              "x": 938.75,
              "y": 550
            },
            "target": {
              "x": 1158.75,
              "y": 550
            },
            "vertices": [
              {
                "x": 1048.75,
                "y": 530
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "B4",
              "description": "Middleware / Backend Boundary.",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "fdb19554-236f-4a42-8730-a52e6fc554a2",
            "labels": [
              "B4"
            ],
            "source": {
              "x": 890,
              "y": 250
            },
            "target": {
              "x": 890,
              "y": 390
            },
            "vertices": [
              {
                "x": 910,
                "y": 320
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "B2",
              "description": "Pending reviews page / Middleware Boundary.",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "95d5d15f-57c4-4d71-aae3-b5fed882f5c8",
            "labels": [
              "B2"
            ],
            "source": {
              "x": 450,
              "y": 230
            },
            "target": {
              "x": 460,
              "y": 390
            },
            "vertices": [
              {
                "x": 480,
                "y": 310
              }
            ]
          },
          {
            "position": {
              "x": 496.25,
              "y": 270
            },
            "size": {
              "width": 110,
              "height": 90
            },
            "attrs": {
              "text": {
                "text": "Middleware"
              },
              "body": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 11,
            "id": "9b57f1fd-680a-4f9b-9a0c-d3d4db27dcbd",
            "data": {
              "type": "tm.Process",
              "name": "Middleware",
              "description": "The middleware responsible to sanitize and verify update review request authentication.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "handlesCardPayment": false,
              "handlesGoodsOrServices": false,
              "isWebApplication": false,
              "privilegeLevel": "Business Admin",
              "threats": [
                {
                  "id": "acaa0caa-7302-4b4a-b27b-22e457746d95",
                  "title": "Middleware Interruption",
                  "status": "Open",
                  "severity": "High",
                  "type": "Denial of service",
                  "description": "Attacks such as Denial of Service (DoS) can overload the middleware with excessive requests, rendering it unavailable.",
                  "mitigation": "Implement rate limiting and proper load balancing. ",
                  "modelType": "Generic",
                  "new": false,
                  "number": 24,
                  "score": ""
                },
                {
                  "id": "0dfe1caf-77da-4c7d-943b-78c943a18b88",
                  "title": "Credentials exposure in repository",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "There's a risk of exposing credentials when source code contains sensitive information, such as usernames, passwords, or API keys, in a version control repository.",
                  "mitigation": "To mitigate the risk of credential exposure, it's essential to avoid storing sensitive credentials directly in the codebase or version control repository. Instead, we should adopt secure credential management practices, such as using environment variables, configuration files outside of the repository, or a secure vault solution. ",
                  "modelType": "Generic",
                  "new": false,
                  "number": 33,
                  "score": ""
                },
                {
                  "id": "6d84a143-938d-4c0e-972d-b057024d4934",
                  "title": "File too large",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Denial of service",
                  "description": "Provide a description for this threat",
                  "mitigation": "Provide remediation for this threat or a reason if status is N/A",
                  "modelType": "Generic",
                  "new": false,
                  "number": 193,
                  "score": ""
                },
                {
                  "id": "add04475-c3e1-4227-a057-0053621b9530",
                  "title": "File size too large",
                  "status": "Open",
                  "severity": "High",
                  "type": "Denial of service",
                  "description": "Since there are endpoints that allow files to be sent, attackers are free to send files that are too large to cause a DOS when the file is processed or stored on the system.",
                  "mitigation": "To prevent this type of attack we need to set a file size limit and filename length limit.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 194,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 900,
              "y": 190
            },
            "size": {
              "width": 280,
              "height": 220
            },
            "attrs": {
              "text": {
                "text": "Backend respond review process"
              },
              "body": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 12,
            "id": "6ed5ac14-923d-4e4c-a5c8-ea885c7eefae",
            "data": {
              "type": "tm.Process",
              "name": "Backend respond review process",
              "description": "The application backend that processes the review update request.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "handlesCardPayment": false,
              "handlesGoodsOrServices": false,
              "isWebApplication": false,
              "privilegeLevel": "Middleware",
              "threats": [
                {
                  "id": "c47b1000-c46e-4bde-928f-26e2c8cce841",
                  "title": "Must attend to principle of least privilege on DB access",
                  "status": "Open",
                  "severity": "High",
                  "type": "Tampering",
                  "description": "The component could be vulnerable to a tampering attack, where the attacker could maliciously modify some content in the database, such as deleting tables or changing profile database privileges.",
                  "mitigation": "One possible mitigation is to apply the principle of least privilege to the database used by this component. By granting only read/write access, we can minimize the damage provoked by this possible attack, where the attacker will be blocked from any admin operation.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 27,
                  "score": ""
                },
                {
                  "id": "87897b97-9d9b-408f-be6d-81f95f641038",
                  "title": "Poison messages",
                  "status": "Open",
                  "severity": "High",
                  "type": "Denial of service",
                  "description": "An attacker could generate a malicious message that the Backend cannot process.",
                  "mitigation": "Validate the content of all messages, before processing. Reject any message that have invalid content and log the rejection. Do not log the malicious content - instead log a description of the error.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 30,
                  "score": ""
                },
                {
                  "id": "339f68e5-3c2d-47da-939a-3f919c86b542",
                  "title": "Credentials exposure",
                  "status": "Open",
                  "severity": "High",
                  "type": "Spoofing",
                  "description": "There's a risk of exposing credentials when code containing sensitive information, such as usernames, passwords, or API keys, is stored in a version control repository (repo).",
                  "mitigation": "To mitigate the risk of credential exposure, it's essential to avoid storing sensitive credentials directly in the codebase or version control repository. Instead, we should adopt secure credential management practices, such as using environment variables, configuration files outside of the repository, or a secure vault solution. ",
                  "modelType": "Generic",
                  "new": false,
                  "number": 34,
                  "score": ""
                },
                {
                  "id": "60ea117c-0aa2-43d8-9084-045dd5de17f3",
                  "title": "Malicious file upload",
                  "status": "Open",
                  "severity": "High",
                  "type": "Denial of service",
                  "description": "Exists business logic on the Backend that often involves processing and storing files, creating a potential window for attackers to exploit vulnerabilities in the file parser. This could lead to scenarios where attackers overwrite other files or inject malicious client-side active content (XSS, CSRF, etc.). ",
                  "mitigation": "To prevent this type of attack we need to:\n- Validate the file type, don't trust the Content-Type header as it can be spoofed\n- Change the filename to something generated by the application\n- Only allow authorized users to upload files",
                  "modelType": "Generic",
                  "new": false,
                  "number": 192,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 980,
              "y": 570
            },
            "size": {
              "width": 120,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "Database"
              },
              "topLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              },
              "bottomLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "store",
            "zIndex": 13,
            "id": "cab91efc-fa06-4d42-a328-165a330d35d6",
            "data": {
              "type": "tm.Store",
              "name": "Database",
              "description": "Database that stores middleware auth tokens and the pending reviews data.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isALog": false,
              "isEncrypted": false,
              "isSigned": false,
              "storesCredentials": true,
              "storesInventory": true,
              "threats": [
                {
                  "id": "ff28617e-df71-440b-9a44-78bba1f1c7d0",
                  "title": "Unauthorised access",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Information disclosure",
                  "description": "An attacker could make an query call on the application DB.",
                  "mitigation": "Require all queries to be authenticated.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 15,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 787.5,
              "y": 80
            },
            "size": {
              "width": 112.5,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "The Message Queue and Logging components have been omitted to avoid redundant content in the DFD's."
              }
            },
            "visible": true,
            "shape": "td-text-block",
            "zIndex": 14,
            "id": "f0af069c-409b-430d-905c-c233775c38dc",
            "data": {
              "type": "tm.Text",
              "name": "The Message Queue and Logging components have been omitted to avoid redundant content in the DFD's.",
              "hasOpenThreats": false
            }
          }
        ],
        "description": "Approve/Reject Review Function diagram"
      },
      {
        "id": 52,
        "title": "DFD - Level 2 - Booking Payment Function",
        "diagramType": "Generic",
        "placeholder": "New generic diagram description",
        "thumbnail": "./public/content/images/thumbnail.jpg",
        "version": "2.2.0",
        "cells": [
          {
            "position": {
              "x": 483.75,
              "y": 150
            },
            "size": {
              "width": 112.5,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "User"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "actor",
            "zIndex": 1,
            "id": "845f54d0-5166-4a66-aa00-6f344844eb29",
            "data": {
              "type": "tm.Actor",
              "name": "User",
              "description": "Platform users that are trying to book a property.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "providesAuthentication": true,
              "threats": []
            }
          },
          {
            "position": {
              "x": 456.25,
              "y": 380
            },
            "size": {
              "width": 60,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "Frontend"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 4,
            "id": "aaa04b46-0974-4d34-962c-9e4dbb784c96",
            "data": {
              "type": "tm.Process",
              "name": "Frontend",
              "description": "Book a property page in the application frontend.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "handlesCardPayment": false,
              "handlesGoodsOrServices": false,
              "isWebApplication": true,
              "privilegeLevel": "User",
              "threats": []
            }
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "8b906127-0a35-45d4-bd54-82473309031d",
            "source": {
              "x": 500,
              "y": 540
            },
            "target": {
              "x": 730,
              "y": 390
            },
            "vertices": [
              {
                "x": 620,
                "y": 500
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "9c5f8709-1711-471f-8653-38e14932d59a",
            "source": {
              "x": 890,
              "y": 400
            },
            "target": {
              "x": 900,
              "y": 610
            }
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "a5826425-8f1b-4bd1-9bf5-010ca7c471c2",
            "source": {
              "x": 390,
              "y": 280
            },
            "target": {
              "x": 680,
              "y": 300
            },
            "vertices": [
              {
                "x": 520,
                "y": 330
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "064d002e-41fc-4aec-adca-1a3a8fdf86cb",
            "source": {
              "x": 830,
              "y": 1030
            },
            "target": {
              "x": 1060,
              "y": 1020
            },
            "vertices": [
              {
                "x": 960,
                "y": 960
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "a2da4fbf-aa4c-4a41-bb39-fb45f474b6b5",
            "source": {
              "x": 1280,
              "y": 940
            },
            "target": {
              "x": 1490,
              "y": 910
            },
            "vertices": [
              {
                "x": 1370,
                "y": 890
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "f09f7515-a342-4a3d-9106-248702932fac",
            "source": {
              "x": 870,
              "y": 330
            },
            "target": {
              "x": 1410,
              "y": 240
            },
            "vertices": [
              {
                "x": 1210,
                "y": 430
              },
              {
                "x": 1500,
                "y": 340
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "dc81fd16-2a5c-41fb-8d69-aa6c40615f3e",
            "source": {
              "x": 1540,
              "y": 200
            },
            "target": {
              "x": 1730,
              "y": 230
            },
            "vertices": [
              {
                "x": 1610,
                "y": 280
              }
            ]
          },
          {
            "shape": "trust-boundary-curve",
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Boundary",
              "name": "",
              "description": "",
              "isTrustBoundary": true,
              "hasOpenThreats": false
            },
            "id": "4a6907f6-de9b-437b-a652-8586dc53dc74",
            "source": {
              "x": 1680,
              "y": 510
            },
            "target": {
              "x": 1630,
              "y": 680
            }
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "#333333",
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Response",
              "description": "Redirected to the stripe checkout session.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "isBidirectional": false,
              "isEncrypted": false,
              "isPublicNetwork": false,
              "protocol": "",
              "threats": []
            },
            "id": "8c0de13a-10d9-4ff9-9d4c-e1a0bce083ee",
            "labels": [
              "Response"
            ],
            "source": {
              "cell": "aaa04b46-0974-4d34-962c-9e4dbb784c96"
            },
            "target": {
              "cell": "845f54d0-5166-4a66-aa00-6f344844eb29"
            },
            "vertices": [
              {
                "x": 570,
                "y": 290
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Request",
              "description": "Click to pay for the booking.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": false,
              "isPublicNetwork": false,
              "protocol": "",
              "threats": [
                {
                  "id": "c15d2d8f-eb19-466d-bac0-7f156aa5d088",
                  "title": "Accessing another user’s credentials",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Spoofing",
                  "description": "The request could be done by an attacker that had access to the user's password through various means, such as phishing or intercepting login credentials, and because of that, the attacker can gain unauthorized access.",
                  "mitigation": "Two-Factor Authentication (2FA) adds an extra layer of security by requiring users to provide a second form of authentication, with a code sent to the mobile device, in addition to their password. Even if an attacker manages to steal the user's password, they would still need this second factor to access the account.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 36,
                  "score": ""
                }
              ]
            },
            "id": "32ee13fc-b435-400b-a9bc-33f876d6daaf",
            "labels": [
              "Request"
            ],
            "source": {
              "cell": "845f54d0-5166-4a66-aa00-6f344844eb29"
            },
            "target": {
              "cell": "aaa04b46-0974-4d34-962c-9e4dbb784c96"
            },
            "vertices": [
              {
                "x": 489.25,
                "y": 300
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Checkout session response",
              "description": "Stripe checkout session url.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "394b0907-e40e-4025-87a2-ef2f202e23b2",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker.",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 2,
                  "score": ""
                }
              ]
            },
            "id": "5e017137-7b62-4154-b7e3-25c24a2accd3",
            "labels": [
              "Checkout session response"
            ],
            "source": {
              "cell": "95ff0279-8091-43e9-913d-ed9bbe327a38"
            },
            "target": {
              "cell": "aaa04b46-0974-4d34-962c-9e4dbb784c96"
            },
            "vertices": [
              {
                "x": 580,
                "y": 504
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "PayForBooking()",
              "description": "Endpoint that provides the functionality related to the payment of bookings.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "1ba0148d-5fd2-40d4-8b25-0c548ad359c7",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker. ",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 5,
                  "score": ""
                }
              ]
            },
            "id": "912fe1ee-c65d-4c6f-b508-5cbca9834fb6",
            "labels": [
              "PayForBooking()"
            ],
            "source": {
              "cell": "aaa04b46-0974-4d34-962c-9e4dbb784c96"
            },
            "target": {
              "cell": "95ff0279-8091-43e9-913d-ed9bbe327a38"
            },
            "vertices": [
              {
                "x": 640,
                "y": 440
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "CallWebhook()",
              "description": "Webhook that the Stripe API executes whenever a payment is done.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "b97995ce-a483-4579-8c6e-42eba6695002",
                  "title": "Compromised third party service",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Tampering",
                  "description": "Risk of using a compromised third party service.",
                  "mitigation": "Having multiple alternatives provides the ability of deactivating the compromised API, reducing the risk of malicious actors tampering the email sending functionality or intercepting sensitive data transmitted through the compromised API.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 17,
                  "score": ""
                },
                {
                  "id": "7493275a-71eb-4b16-b6c1-a68bbfe78fed",
                  "title": "Checkout Session metadata encryption",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "Third party service with access to domain relevant and private data.",
                  "mitigation": "GIven that a checkout session has linked metadata that is relevant to the application domain, this data must be encrypted so that the third party doesn't direct have access to it.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 18,
                  "score": ""
                }
              ]
            },
            "id": "3cda0040-eb4c-43e8-8770-69141006e317",
            "labels": [
              "CallWebhook()"
            ],
            "source": {
              "cell": "3932d5e6-c7e9-47bd-b8eb-422e09b681eb"
            },
            "target": {
              "cell": "95ff0279-8091-43e9-913d-ed9bbe327a38"
            },
            "vertices": [
              {
                "x": 758,
                "y": 950
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Get Checkout Session Response",
              "description": "Stripe checkout session url.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "8e4ed59c-8abc-4246-aff1-9ad5c41679de",
                  "title": "Compromised third party service",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Tampering",
                  "description": "Risk of using a compromised third party service.",
                  "mitigation": "Having multiple alternatives provides the ability of deactivating the compromised API, reducing the risk of malicious actors tampering the email sending functionality or intercepting sensitive data transmitted through the compromised API.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 26,
                  "score": ""
                }
              ]
            },
            "id": "89f2d5cc-6d33-497c-ac12-0ddb5792118b",
            "labels": [
              "Get Checkout Session Response"
            ],
            "source": {
              "cell": "3932d5e6-c7e9-47bd-b8eb-422e09b681eb"
            },
            "target": {
              "cell": "ddf83dc7-d882-4afc-ae51-3df3ef2d76d3"
            },
            "vertices": [
              {
                "x": 1020,
                "y": 870
              },
              {
                "x": 1090,
                "y": 680
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "GetCheckoutSession()",
              "description": "Requests the Stripe API for a checkout session.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "4d48fcc9-15ba-4bfc-9aa3-afe7561ae299",
                  "title": "Compromised third party service",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Tampering",
                  "description": "Risk of using a compromised third party service.",
                  "mitigation": "Having multiple alternatives provides the ability of deactivating the compromised API, reducing the risk of malicious actors tampering the email sending functionality or intercepting sensitive data transmitted through the compromised API.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 19,
                  "score": ""
                },
                {
                  "id": "d17a9b7f-5150-40fa-82ab-4653751a5caf",
                  "title": "Checkout Session metadata encryption",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "Provide a description for this threat",
                  "mitigation": "Provide remediation for this threat or a reason if status is N/A",
                  "modelType": "Generic",
                  "new": false,
                  "number": 20,
                  "score": ""
                }
              ]
            },
            "id": "58068cbb-1ab6-4eb0-8e35-c934679492c3",
            "labels": [
              "GetCheckoutSession()"
            ],
            "source": {
              "cell": "ddf83dc7-d882-4afc-ae51-3df3ef2d76d3"
            },
            "target": {
              "cell": "3932d5e6-c7e9-47bd-b8eb-422e09b681eb"
            },
            "vertices": [
              {
                "x": 900,
                "y": 810
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "PayForBooking()",
              "description": "Endpoint that provides the functionality related to the payment of bookings.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "0996b717-23d9-4255-91e2-e0ccf1360f0a",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker. ",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 6,
                  "score": ""
                },
                {
                  "id": "146d733c-205d-49e8-8469-4387aff34d90",
                  "title": "Can't identify the user that performs the operation",
                  "status": "Open",
                  "severity": "High",
                  "type": "Repudiation",
                  "description": "There's a risk that requests will occur within the Middleware without proper attribution to the responsible user if there's no mechanism for attribution.",
                  "mitigation": "Implementing an audit log is a possible mitigation strategy. It records all significant events within the system,  ensuring accountability and traceability.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 35,
                  "score": ""
                }
              ]
            },
            "id": "364d0713-2e63-418f-b989-a29e7a56350c",
            "labels": [
              "PayForBooking()"
            ],
            "source": {
              "cell": "95ff0279-8091-43e9-913d-ed9bbe327a38"
            },
            "target": {
              "cell": "ddf83dc7-d882-4afc-ae51-3df3ef2d76d3"
            },
            "vertices": [
              {
                "x": 900,
                "y": 470
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Checkout session response",
              "description": "Stripe checkout session url.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "805ed409-6a1a-413a-ab5c-91fa87469b31",
                  "title": "Data flow should use HTTP/S",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "Given that the request is made over the public internet and could be intercepted by an attacker. ",
                  "mitigation": "The requests should require HTTP/S.\nThis will provide confidentially and integrity.\nHTTP should not be supported.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 9,
                  "score": ""
                }
              ]
            },
            "id": "19d38704-e2c3-4202-8245-88c70e5883dc",
            "labels": [
              "Checkout session response"
            ],
            "source": {
              "cell": "ddf83dc7-d882-4afc-ae51-3df3ef2d76d3"
            },
            "target": {
              "cell": "95ff0279-8091-43e9-913d-ed9bbe327a38"
            },
            "vertices": [
              {
                "x": 890,
                "y": 550
              },
              {
                "x": 850,
                "y": 550
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Pay for booking SQL Query Result",
              "description": "SQL Query result.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": false,
              "protocol": "TCP/IP",
              "threats": [
                {
                  "id": "b1d7a7ce-9a20-4af1-a0d7-14f8ca3c041f",
                  "title": "Credential Exposure",
                  "status": "Open",
                  "severity": "Low",
                  "type": "Information disclosure",
                  "description": "if database credentials are transmitted insecurely, they could be intercepted and used by an attacker to gain unauthorized access.",
                  "mitigation": "Always use encrypted connections for transmitting credentials and employ robust authentication mechanisms.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 31,
                  "score": ""
                }
              ]
            },
            "id": "50d6fd69-5c55-4a54-ad99-237ed792290e",
            "labels": [
              "Pay for booking SQL Query Result"
            ],
            "source": {
              "cell": "04485c10-7beb-4cbc-a83e-54fcf465f4b4"
            },
            "target": {
              "cell": "ddf83dc7-d882-4afc-ae51-3df3ef2d76d3"
            },
            "vertices": [
              {
                "x": 1250,
                "y": 710
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Save booking payment SQL Query",
              "description": "Query that inserts payment data to the database.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": false,
              "protocol": "TCP/IP",
              "threats": [
                {
                  "id": "f9b2d74d-87fe-4588-ad22-453dac8bc169",
                  "title": "SQL Injection",
                  "status": "Open",
                  "severity": "High",
                  "type": "Tampering",
                  "description": "Attackers can manipulate the SQL queries by injecting malicious SQL code through input fields that interface with the database.",
                  "mitigation": "Use prepared statements and parameterized queries to handle SQL commands. Never concatenate user input directly into SQL queries. Regularly validate and sanitize all user inputs.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 28,
                  "score": ""
                },
                {
                  "id": "99dd646a-60f4-4f2f-8302-0c6b0babbcb1",
                  "title": "Credential Exposure",
                  "status": "Open",
                  "severity": "Low",
                  "type": "Information disclosure",
                  "description": "If database credentials are transmitted insecurely, they could be intercepted and used by an attacker to gain unauthorized access.",
                  "mitigation": "Always use encrypted connections for transmitting credentials and employ robust authentication mechanisms.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 30,
                  "score": ""
                }
              ]
            },
            "id": "12cfacfd-43de-46ab-9ac6-75612e0f7572",
            "labels": [
              "Save booking payment SQL Query"
            ],
            "source": {
              "cell": "ddf83dc7-d882-4afc-ae51-3df3ef2d76d3"
            },
            "target": {
              "cell": "04485c10-7beb-4cbc-a83e-54fcf465f4b4"
            },
            "vertices": [
              {
                "x": 1440,
                "y": 770
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Response",
              "description": "Response from the request.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "b77abbcb-48b9-4a71-ada3-fe17c3e2abb1",
                  "title": "Compromised third party service",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Tampering",
                  "description": "Risk of using a compromised third party service.",
                  "mitigation": "Having multiple alternatives provides the ability of deactivating the compromised API, reducing the risk of malicious actors tampering the email sending functionality or intercepting sensitive data transmitted through the compromised API.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 25,
                  "score": ""
                }
              ]
            },
            "id": "4a456ce2-75b1-46c9-9c61-c48d249afc41",
            "labels": [
              "Response"
            ],
            "source": {
              "cell": "fc302213-110a-4907-91f6-01f326116293"
            },
            "target": {
              "cell": "ddf83dc7-d882-4afc-ae51-3df3ef2d76d3"
            },
            "vertices": [
              {
                "x": 1590,
                "y": 540
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Send payment confirmation email",
              "description": "request to send an e-mail to a user with the purpose of notifying that a payment was done.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "HTTP/S",
              "threats": [
                {
                  "id": "9ed3b2a5-021c-4a34-aefa-47d54148c932",
                  "title": "Compromised third party service",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Tampering",
                  "description": "Risk of using a compromised third party service.",
                  "mitigation": "Having multiple alternatives provides the ability of deactivating the compromised API, reducing the risk of malicious actors tampering the email sending functionality or intercepting sensitive data transmitted through the compromised API.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 11,
                  "score": ""
                }
              ]
            },
            "id": "755d1c5c-0de0-43cf-a65e-ea6f27e90bce",
            "labels": [
              "Send payment confirmation email"
            ],
            "source": {
              "cell": "ddf83dc7-d882-4afc-ae51-3df3ef2d76d3"
            },
            "target": {
              "cell": "fc302213-110a-4907-91f6-01f326116293"
            },
            "vertices": [
              {
                "x": 1370,
                "y": 590
              },
              {
                "x": 1490,
                "y": 610
              },
              {
                "x": 1500,
                "y": 610
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Put message",
              "description": "Writes a new log at end of the queue.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "AMQP",
              "threats": [
                {
                  "id": "4ce67315-75b5-4e6e-b3a4-ecbf657c2dfa",
                  "title": "Message should be encrypted",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "There's a risk of messages being intercepted by some attacker that can gain access to sensitive information with unauthorized access.",
                  "mitigation": "A mitigation strategy can be using encryption on the communication. This encryption should be end-to-end, meaning that only authorized parties possess the keys necessary to decrypt and access the contents of the messages. Using RabbitMQ we can use SSL (https://www.rabbitmq.com/docs/ssl).",
                  "modelType": "Generic",
                  "new": false,
                  "number": 22,
                  "score": ""
                }
              ]
            },
            "id": "2b340c4c-85a3-4813-be93-10408bceb008",
            "labels": [
              "Put message"
            ],
            "source": {
              "cell": "95ff0279-8091-43e9-913d-ed9bbe327a38"
            },
            "target": {
              "cell": "459d67e8-7236-45db-b6d5-bda19b34ba2e"
            },
            "vertices": [
              {
                "x": 900,
                "y": 350
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Put message",
              "description": "Writes a new log at end of the queue.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "AMQP",
              "threats": [
                {
                  "id": "4d7438af-73f6-4c0a-9faa-d2e4fc7f53d2",
                  "title": "Message should be encrypted",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "There's a risk of messages being intercepted by some attacker that can gain access to sensitive information with unauthorized access.",
                  "mitigation": "A mitigation strategy can be using encryption on the communication. This encryption should be end-to-end, meaning that only authorized parties possess the keys necessary to decrypt and access the contents of the messages. Using RabbitMQ we can use SSL (https://www.rabbitmq.com/docs/ssl).",
                  "modelType": "Generic",
                  "new": false,
                  "number": 23,
                  "score": ""
                }
              ]
            },
            "id": "43e66ed6-6100-4ec2-9351-479f3e3c07ee",
            "labels": [
              "Put message"
            ],
            "source": {
              "cell": "ddf83dc7-d882-4afc-ae51-3df3ef2d76d3"
            },
            "target": {
              "cell": "459d67e8-7236-45db-b6d5-bda19b34ba2e"
            },
            "vertices": [
              {
                "x": 1110,
                "y": 370
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Get message",
              "description": "Dequeue message and stores it on the logging database.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "protocol": "AMQP",
              "threats": [
                {
                  "id": "b78c9893-cb8d-4a89-bcc1-bcfc503da56b",
                  "title": "Message should be encrypted",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "There's a risk of messages being intercepted by some attacker that can gain access to sensitive information with unauthorized access.",
                  "mitigation": "A mitigation strategy can be using encryption on the communication. This encryption should be end-to-end, meaning that only authorized parties possess the keys necessary to decrypt and access the contents of the messages. Using RabbitMQ we can use SSL (https://www.rabbitmq.com/docs/ssl).",
                  "modelType": "Generic",
                  "new": false,
                  "number": 27,
                  "score": ""
                }
              ]
            },
            "id": "3c24fc64-432d-4078-8f4b-931a065682dc",
            "labels": [
              "Get message"
            ],
            "source": {
              "cell": "459d67e8-7236-45db-b6d5-bda19b34ba2e"
            },
            "target": {
              "cell": "5246b1f3-cbf9-450e-92db-edb0db742e6b"
            },
            "vertices": [
              {
                "x": 1240,
                "y": 350
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Read/Write ",
              "description": "Reads ans writes data into the logging database.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": false,
              "protocol": "TCP/IP",
              "threats": [
                {
                  "id": "24207141-dacf-4df3-bd83-e5d6a756dda9",
                  "title": "Credentials exposure",
                  "status": "Open",
                  "severity": "High",
                  "type": "Spoofing",
                  "description": "There's a risk of exposing credentials when code containing sensitive information, such as usernames, passwords, or API keys, is stored in a version control repository (repo).",
                  "mitigation": "To mitigate the risk of credential exposure, it's essential to avoid storing sensitive credentials directly in the codebase or version control repository. Instead, we should adopt secure credential management practices, such as using environment variables, configuration files outside of the repository, or a secure vault solution. ",
                  "modelType": "Generic",
                  "new": false,
                  "number": 32,
                  "score": ""
                }
              ]
            },
            "id": "a90c7143-bb15-4af5-9f6f-2fa976e6c806",
            "labels": [
              "Read/Write "
            ],
            "source": {
              "cell": "5246b1f3-cbf9-450e-92db-edb0db742e6b"
            },
            "target": {
              "x": 1590,
              "y": 350
            },
            "vertices": [
              {
                "x": 1570,
                "y": 290
              }
            ]
          },
          {
            "shape": "flow",
            "attrs": {
              "line": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "targetMarker": {
                  "name": "block"
                },
                "sourceMarker": {
                  "name": ""
                },
                "strokeDasharray": null
              }
            },
            "width": 200,
            "height": 100,
            "zIndex": 10,
            "connector": "smooth",
            "data": {
              "type": "tm.Flow",
              "name": "Response",
              "description": "Request response",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isBidirectional": false,
              "isEncrypted": true,
              "isPublicNetwork": false,
              "protocol": "TCP/IP",
              "threats": [
                {
                  "id": "e971dcc5-dc32-4d79-8917-8cc54d49caf8",
                  "title": "Credentials exposure",
                  "status": "Open",
                  "severity": "High",
                  "type": "Spoofing",
                  "description": "There's a risk of exposing credentials when code containing sensitive information, such as usernames, passwords, or API keys, is stored in a version control repository (repo).",
                  "mitigation": "To mitigate the risk of credential exposure, it's essential to avoid storing sensitive credentials directly in the codebase or version control repository. Instead, we should adopt secure credential management practices, such as using environment variables, configuration files outside of the repository, or a secure vault solution. ",
                  "modelType": "Generic",
                  "new": false,
                  "number": 33,
                  "score": ""
                }
              ]
            },
            "id": "db89ef48-2feb-4774-a22f-eb64d6faa4f9",
            "labels": [
              "Response"
            ],
            "source": {
              "cell": "6864409d-9569-41ff-9db3-a4aa91c51087"
            },
            "target": {
              "cell": "5246b1f3-cbf9-450e-92db-edb0db742e6b"
            },
            "vertices": [
              {
                "x": 1680,
                "y": 290
              }
            ]
          },
          {
            "position": {
              "x": 670,
              "y": 460.0000000000002
            },
            "size": {
              "width": 160,
              "height": 80
            },
            "attrs": {
              "text": {
                "text": "Middleware"
              },
              "body": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 11,
            "id": "95ff0279-8091-43e9-913d-ed9bbe327a38",
            "data": {
              "type": "tm.Process",
              "name": "Middleware",
              "description": "Responsible for request rate limiting, filtering, validation and sanitization before it reaches the backend.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "handlesCardPayment": false,
              "handlesGoodsOrServices": false,
              "isWebApplication": false,
              "privilegeLevel": "User",
              "threats": [
                {
                  "id": "cc74c518-b025-456e-a3ca-f4ad8b201c37",
                  "title": "Middleware Interruption",
                  "status": "Open",
                  "severity": "High",
                  "type": "Denial of service",
                  "description": "It's possible that the entry of the Middleware server can be target of a high demand requests by malicious actors with a high volume of traffic, overwhelming its resources and making it unable to respond to legitimate user requests. This results on the server of the application to becoming inaccessible or slow to respond for genuine users, disrupting its normal functioning.",
                  "mitigation": "One effective mitigation strategy is to implement a rate limiting and traffic filter mechanism, satisfying only the organic requests made by genuine users and blocking all suspicious interaction. ",
                  "modelType": "Generic",
                  "new": false,
                  "number": 4,
                  "score": ""
                },
                {
                  "id": "b58175b6-0b94-4e7e-a4ca-faaf197284b5",
                  "title": "Credential Exposure in repository",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Information disclosure",
                  "description": "There's a risk of exposing credentials when source code is stored in a version control system and contains sensitive data such as usernames, passwords, or API keys.",
                  "mitigation": "To mitigate the risk of credential exposure, it's essential to avoid storing sensitive credentials directly in the codebase or version control repository. Instead, we should adopt secure credential management practices, such as using environment variables, configuration files outside of the repository, or a secure vault solution. ",
                  "modelType": "Generic",
                  "new": false,
                  "number": 39,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 959,
              "y": 450.000000000001
            },
            "size": {
              "width": 370,
              "height": 180
            },
            "attrs": {
              "text": {
                "text": "Backend Payment Process"
              },
              "body": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 12,
            "id": "ddf83dc7-d882-4afc-ae51-3df3ef2d76d3",
            "data": {
              "type": "tm.Process",
              "name": "Backend Payment Process",
              "description": "The application backend that orchestrates the logic of a booking payment.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "handlesCardPayment": false,
              "handlesGoodsOrServices": false,
              "isWebApplication": false,
              "privilegeLevel": "Middleware",
              "threats": [
                {
                  "id": "c713c109-46bb-403b-9b20-ad5dffd48e17",
                  "title": "Poisoned messages ",
                  "status": "Open",
                  "severity": "High",
                  "type": "Denial of service",
                  "description": "An attacker could generate a malicious message that the Backend cannot process.",
                  "mitigation": "Validate the content of all messages, before processing. Reject any message that have invalid content and log the rejection. Do not log the malicious content - instead log a description of the error.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 12,
                  "score": ""
                },
                {
                  "id": "f26a5cbb-f8c9-4309-8bc7-07f8c6ec7d8c",
                  "title": "Must attend to principle of least privilege on DB access",
                  "status": "Open",
                  "severity": "High",
                  "type": "Tampering",
                  "description": "The component could be vulnerable to a tampering attack, where the attacker could maliciously modify some content in the database, such as deleting tables or changing profile database privileges.",
                  "mitigation": "One possible mitigation is to apply the principle of least privilege to the database used by this component. By granting only read/write access, we can minimize the damage provoked by this possible attack, where the attacker will be blocked from any admin operation.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 13,
                  "score": ""
                },
                {
                  "id": "b301d4d8-3a09-4d4a-b128-947871224586",
                  "title": "Repudiation account from not validated accounts",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Spoofing",
                  "description": "The backend server can receive request from users that have their account's detail fulfilment of random/invalid information. This can lead to a repudiation threat, because it will be impossible to detect the real person behind the user information.",
                  "mitigation": "A possible strategy to reduce the likelihood of this type of operation is to require all users to validate their email before gaining access to any functionality of the system.This type of measure can reduce the motivation for attackers to make anonymous requests.\nNote: A more secure and robust mitigation strategy is to implement Know Your Client (KYC), but given the scope of the application, this may be a barrier to new users entering the platform, so we take some risk to gain more users.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 14,
                  "score": ""
                },
                {
                  "id": "47022ec7-5a0e-4335-95ef-4e8f26f26754",
                  "title": "Credential Exposure in repository",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Information disclosure",
                  "description": "There's a risk of exposing credentials when source code is stored in a version control system and contains sensitive data such as usernames, passwords, or API keys.",
                  "mitigation": "To mitigate the risk of credential exposure, it's essential to avoid storing sensitive credentials directly in the codebase or version control repository. Instead, we should adopt secure credential management practices, such as using environment variables, configuration files outside of the repository, or a secure vault solution. ",
                  "modelType": "Generic",
                  "new": false,
                  "number": 40,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 1300,
              "y": 980
            },
            "size": {
              "width": 120,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "Database"
              },
              "topLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              },
              "bottomLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "store",
            "zIndex": 13,
            "id": "04485c10-7beb-4cbc-a83e-54fcf465f4b4",
            "data": {
              "type": "tm.Store",
              "name": "Database",
              "description": "Database that stores the application relevant data.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isALog": false,
              "isEncrypted": false,
              "isSigned": false,
              "storesCredentials": true,
              "storesInventory": false,
              "threats": [
                {
                  "id": "a43450fd-0cec-4cde-96cc-2ed8c7625914",
                  "title": "Unauthorized access",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "An attacker could make an query call on the application DB.",
                  "mitigation": "Require all queries to be authenticated.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 29,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 1590,
              "y": 190
            },
            "size": {
              "width": 60,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "Logging"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 14,
            "id": "5246b1f3-cbf9-450e-92db-edb0db742e6b",
            "data": {
              "type": "tm.Process",
              "name": "Logging",
              "description": "Logging server.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": false,
              "handlesCardPayment": false,
              "handlesGoodsOrServices": false,
              "isWebApplication": false,
              "privilegeLevel": "",
              "threats": []
            }
          },
          {
            "position": {
              "x": 1100,
              "y": 210
            },
            "size": {
              "width": 120,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "Message Queue"
              },
              "topLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              },
              "bottomLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "store",
            "zIndex": 15,
            "id": "459d67e8-7236-45db-b6d5-bda19b34ba2e",
            "data": {
              "type": "tm.Store",
              "name": "Message Queue",
              "description": "Queue of logs that have to be stored on a logging server.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isALog": true,
              "isEncrypted": true,
              "isSigned": false,
              "storesCredentials": false,
              "storesInventory": false,
              "threats": [
                {
                  "id": "c722c7e6-378a-4c28-9b2e-a1a81be697a1",
                  "title": "Fake messages could be placed on the queue",
                  "status": "Open",
                  "severity": "Medium",
                  "type": "Spoofing",
                  "description": "An attacker could put a fake message on queue, causing the Background Worker to do incorrect processing.",
                  "mitigation": "Restrict access to the queue to the IP addresses of the Web Server and Background Worker. Implement authentication on the queue endpoint.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 16,
                  "score": ""
                },
                {
                  "id": "c2adf571-0e41-4ca3-ba62-e4b365be888c",
                  "title": "Message secrecy",
                  "status": "Open",
                  "severity": "Low",
                  "type": "Information disclosure",
                  "description": "The data flow between the Web Application and the Background Worker is not point-to-point and therefore end-to-end secrecy cannot be provided at the transport layer. Messages could be read by an attacker at rest in the Message Queue.",
                  "mitigation": "Encrypt messages before enqueuing. ",
                  "modelType": "Generic",
                  "new": false,
                  "number": 24,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 1560,
              "y": 350
            },
            "size": {
              "width": 120,
              "height": 60
            },
            "attrs": {
              "text": {
                "text": "Logging Database"
              },
              "topLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              },
              "bottomLine": {
                "stroke": "red",
                "strokeWidth": 2.5,
                "strokeDasharray": null
              }
            },
            "visible": true,
            "shape": "store",
            "zIndex": 16,
            "id": "6864409d-9569-41ff-9db3-a4aa91c51087",
            "data": {
              "type": "tm.Store",
              "name": "Logging Database",
              "description": "Database that stores the logs.",
              "outOfScope": false,
              "reasonOutOfScope": "",
              "hasOpenThreats": true,
              "isALog": true,
              "isEncrypted": false,
              "isSigned": false,
              "storesCredentials": false,
              "storesInventory": false,
              "threats": [
                {
                  "id": "085cd1b3-9a5b-484b-94de-c95e0f16a416",
                  "title": "Unauthorized access",
                  "status": "Open",
                  "severity": "High",
                  "type": "Information disclosure",
                  "description": "An attacker could make an query call on the logs DB.",
                  "mitigation": "Require all queries to be authenticated.",
                  "modelType": "Generic",
                  "new": false,
                  "number": 34,
                  "score": ""
                }
              ]
            }
          },
          {
            "position": {
              "x": 1850,
              "y": 630
            },
            "size": {
              "width": 80,
              "height": 70
            },
            "attrs": {
              "text": {
                "text": "Twillio API"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1.5,
                "strokeDasharray": "4 3"
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 17,
            "id": "fc302213-110a-4907-91f6-01f326116293",
            "data": {
              "type": "tm.Process",
              "name": "Twillio API",
              "description": "Third party service that handles the email sending.",
              "outOfScope": true,
              "reasonOutOfScope": "Third party service",
              "hasOpenThreats": false,
              "handlesCardPayment": false,
              "handlesGoodsOrServices": false,
              "isWebApplication": false,
              "privilegeLevel": "Backend",
              "threats": []
            }
          },
          {
            "position": {
              "x": 940,
              "y": 1000
            },
            "size": {
              "width": 80,
              "height": 70
            },
            "attrs": {
              "text": {
                "text": "Stripe API"
              },
              "body": {
                "stroke": "#333333",
                "strokeWidth": 1.5,
                "strokeDasharray": "4 3"
              }
            },
            "visible": true,
            "shape": "process",
            "zIndex": 18,
            "id": "3932d5e6-c7e9-47bd-b8eb-422e09b681eb",
            "data": {
              "type": "tm.Process",
              "name": "Stripe API",
              "description": "Api that handles credit card payment processing.",
              "outOfScope": true,
              "reasonOutOfScope": "Third party service",
              "hasOpenThreats": false,
              "handlesCardPayment": true,
              "handlesGoodsOrServices": false,
              "isWebApplication": false,
              "privilegeLevel": "Backend",
              "threats": []
            }
          }
        ],
        "description": "Booking Payment Function diagram"
      }
    ],
    "reviewer": "",
    "diagramTop": 15,
    "threatTop": 194
  },
  "version": "2.2.0"
}